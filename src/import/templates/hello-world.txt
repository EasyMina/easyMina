data:application/json;base64,ewogICAgIm5hbWUiOiAiaGVsbG8td29ybGQiLAogICAgImRlc2NyaXB0aW9uIjogInRoaXMgaXMgYW4gZXhhbXBsZSIsCiAgICAiZW5jcnlwdCI6IGZhbHNlLAogICAgImNyZWF0ZWQiOiAiMjAyNC0wMS0xNyAwODozMDo0OSBQTSIsCiAgICAiY29udGVudCI6IHsKICAgICAgICAiY3JlYXRlZCI6ICIyMDI0LTAxLTE3IDA4OjMwOjQ5IFBNIiwKICAgICAgICAicHJvamVjdE5hbWUiOiAiaGVsbG8td29ybGQiLAogICAgICAgICJyb290UGF0aCI6ICJwcm9qZWN0cy9oZWxsby13b3JsZCIsCiAgICAgICAgImZvbGRlcnMiOiB7CiAgICAgICAgICAgICJyb290IjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJkZXN0aW5hdGlvbiI6ICJ0c2NvbmZpZy5qc29uIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6ICJ7XG4gICAgXCJjb21waWxlck9wdGlvbnNcIjoge1xuICAgICAgICBcInRhcmdldFwiOiBcIkVTMjAxOVwiLFxuICAgICAgICBcIm1vZHVsZVwiOiBcImVzMjAyMlwiLFxuICAgICAgICBcImxpYlwiOiBbXG4gICAgICAgICAgICBcImRvbVwiLFxuICAgICAgICAgICAgXCJlc25leHRcIlxuICAgICAgICBdLFxuICAgICAgICBcIm91dERpclwiOiBcIi4vY29udHJhY3RzL2J1aWxkXCIsXG4gICAgICAgIFwicm9vdERpclwiOiBcIi4vY29udHJhY3RzXCIsXG4gICAgICAgIFwic3RyaWN0XCI6IHRydWUsXG4gICAgICAgIFwic3RyaWN0UHJvcGVydHlJbml0aWFsaXphdGlvblwiOiBmYWxzZSxcbiAgICAgICAgXCJza2lwTGliQ2hlY2tcIjogdHJ1ZSxcbiAgICAgICAgXCJmb3JjZUNvbnNpc3RlbnRDYXNpbmdJbkZpbGVOYW1lc1wiOiB0cnVlLFxuICAgICAgICBcImVzTW9kdWxlSW50ZXJvcFwiOiB0cnVlLFxuICAgICAgICBcInJlc29sdmVKc29uTW9kdWxlXCI6IHRydWUsXG4gICAgICAgIFwibW9kdWxlUmVzb2x1dGlvblwiOiBcIm5vZGVcIixcbiAgICAgICAgXCJleHBlcmltZW50YWxEZWNvcmF0b3JzXCI6IHRydWUsXG4gICAgICAgIFwiZW1pdERlY29yYXRvck1ldGFkYXRhXCI6IHRydWUsXG4gICAgICAgIFwiYWxsb3dKc1wiOiB0cnVlLFxuICAgICAgICBcImRlY2xhcmF0aW9uXCI6IGZhbHNlLFxuICAgICAgICBcInNvdXJjZU1hcFwiOiBmYWxzZSxcbiAgICAgICAgXCJub0ZhbGx0aHJvdWdoQ2FzZXNJblN3aXRjaFwiOiB0cnVlLFxuICAgICAgICBcImFsbG93U3ludGhldGljRGVmYXVsdEltcG9ydHNcIjogdHJ1ZSxcbiAgICAgICAgXCJpc29sYXRlZE1vZHVsZXNcIjogdHJ1ZVxuICAgIH0sXG4gICAgXCJpbmNsdWRlXCI6IFtcbiAgICAgICAgXCIuL2NvbnRyYWN0cy8qKi8qLnRzXCJcbiAgICBdLFxuICAgIFwiZXhjbHVkZVwiOiBbXG4gICAgICAgIFwiLi9jb250cmFjdHMvYnVpbGRcIlxuICAgIF1cbn0iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJiYWNrZW5kIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJkZXN0aW5hdGlvbiI6ICJiYWNrZW5kLzAtY3JlYXRlLWFjY291bnRzLm1kIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6ICIjIFVzaW5nIEVhc3lNaW5hIHRvIENyZWF0ZSBBY2NvdW50c1xuXG5UaGlzIHNjcmlwdCBkZW1vbnN0cmF0ZXMgdGhlIHVzYWdlIG9mIHRoZSBgRWFzeU1pbmFgIG1vZHVsZSB0byBjcmVhdGUgYWNjb3VudHMgaW4gdGhlIGNvbnRleHQgb2YgdGhlIE1pbmEgUHJvdG9jb2wgYmxvY2tjaGFpbi4gVGhlIHNjcmlwdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIHN0ZXBzOlxuXG4jIyBJbXBvcnRpbmcgdGhlIEVhc3lNaW5hIE1vZHVsZVxuXG5gYGBqYXZhc2NyaXB0XG5pbXBvcnQgeyBFYXN5TWluYSB9IGZyb20gJ2Vhc3ltaW5hJ1xuYGBgXG5cbkluIHRoaXMgbGluZSwgd2UgaW1wb3J0IHRoZSBgRWFzeU1pbmFgIGNsYXNzIGZyb20gYSBtb2R1bGUgbG9jYXRlZCBhdCBgZWFzeW1pbmFgLiBUaGUgYEVhc3lNaW5hYCBjbGFzcyBpcyBhIHV0aWxpdHkgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIE1pbmEgUHJvdG9jb2wuXG5cbiMjIEluaXRpYWxpemluZyBFYXN5TWluYVxuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn4pyoIEFkZGluZyBFYXN5TWluYS4uLicpXG5jb25zdCBlYXN5TWluYSA9IG5ldyBFYXN5TWluYSggeyAnbmV0d29ya05hbWUnOiAnYmVya2VsZXknIH0pXG5gYGBcblxuSGVyZSwgd2UgaW5pdGlhbGl6ZSBhbiBpbnN0YW5jZSBvZiB0aGUgYEVhc3lNaW5hYCBjbGFzcyBieSBwcm92aWRpbmcgYW4gb2JqZWN0IHdpdGggdGhlIGAnbmV0d29ya05hbWUnYCBzZXQgdG8gYCdiZXJrZWxleSdgLiBUaGlzIGNvbmZpZ3VyYXRpb24gbGlrZWx5IHNwZWNpZmllcyB0aGUgbmV0d29yayBlbnZpcm9ubWVudCB0byBpbnRlcmFjdCB3aXRoLlxuXG4jIyBDcmVhdGluZyBBY2NvdW50c1xuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn8J+UkSBDcmVhdGluZyBBY2NvdW50cy4uLicpXG5jb25zdCBkZXBsb3llcnMgPSBhd2FpdCBlYXN5TWluYS5jcmVhdGVBY2NvdW50cyh7XG4gICAgJ25hbWVzJzogWydhbGljZScsICdib2InLCAnY2hhcmxpZSddLFxuICAgICdncm91cE5hbWUnOiAnYSdcbn0pXG5gYGBcblxuVGhpcyBzZWN0aW9uIGluaXRpYWxpemVzIHRoZSBhY2NvdW50IGNyZWF0aW9uIHByb2Nlc3MgYnkgdXRpbGl6aW5nIHRoZSBgY3JlYXRlQWNjb3VudHNgIG1ldGhvZCBwcm92aWRlZCBieSB0aGUgYGVhc3lNaW5hYCBpbnN0YW5jZS4gSXQgY3JlYXRlcyB0aHJlZSBhY2NvdW50cyBuYW1lZCAnYWxpY2UsJyAnYm9iLCcgYW5kICdjaGFybGllJyBhbmQgYXNzaWducyB0aGVtIHRvIHRoZSAnYScgZ3JvdXAuIElmIHRoZSBhY2NvdW50IGFscmVhZHkgZXhpc3RzLCB0aGUgcHJvY2VzcyBpcyBza2lwcGVkLiBUaGUgdXNlIG9mIHRoZSBgYXdhaXRgIGtleXdvcmQgaW5kaWNhdGVzIHRoYXQgdGhpcyBvcGVyYXRpb24gaXMgYXN5bmNocm9ub3VzIGFuZCByZXR1cm5zIGEgbGlzdCBvZiB0aGUgY3JlYXRlZCBhY2NvdW50cy5cblxuIyMgUmVhZHkgdG8gRGVwbG95XG5cbmBgYGphdmFzY3JpcHRcbmNvbnNvbGUubG9nKCfwn5qAIERlcGxveWVycyBSZWFkeS4nKVxuYGBgXG5cbkZpbmFsbHksIHRoZSBzY3JpcHQgaW5kaWNhdGVzIHRoYXQgdGhlIGRlcGxveWVycyAoY3JlYXRlZCBhY2NvdW50cykgYXJlIHJlYWR5IGZvciB1c2UuIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiZGVzdGluYXRpb24iOiAiYmFja2VuZC8wLWNyZWF0ZS1hY2NvdW50cy5tanMiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogIlxuaW1wb3J0ICogYXMgbzFqcyBmcm9tICdvMWpzJ1xuaW1wb3J0IHsgRWFzeU1pbmEgfSBmcm9tICdlYXN5bWluYSdcblxuY29uc29sZS5sb2coJ+KcqCBBZGRpbmcgRWFzeU1pbmEuLi4nKVxuY29uc3QgZWFzeU1pbmEgPSBuZXcgRWFzeU1pbmEoIHsgJ25ldHdvcmtOYW1lJzogJ2JlcmtlbGV5JywgbzFqcyB9KVxuXG5jb25zb2xlLmxvZygn8J+UkSBDcmVhdGluZyBBY2NvdW50cy4uLicpXG5jb25zdCBkZXBsb3llcnMgPSBhd2FpdCBlYXN5TWluYS5jcmVhdGVBY2NvdW50cyh7XG4gICAgJ25hbWVzJzogWydhbGljZScsICdib2InLCAnY2hhcmxpZSddLFxuICAgICdncm91cE5hbWUnOiAnYSdcbn0pXG5cbmNvbnNvbGUubG9nKCfwn5qAIERlcGxveWVycyBSZWFkeS4nKVxuIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiZGVzdGluYXRpb24iOiAiYmFja2VuZC8xLWRlcGxveS1zbWFydC1jb250cmFjdC5tZCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiAiIyBEZXBsb3lpbmcgYSBTbWFydCBDb250cmFjdCBvbiBNaW5hIFByb3RvY29sXG5cblRoaXMgc2NyaXB0IGRlbW9uc3RyYXRlcyB0aGUgcHJvY2VzcyBvZiBkZXBsb3lpbmcgYSBzbWFydCBjb250cmFjdCBvbiB0aGUgTWluYSBQcm90b2NvbCBibG9ja2NoYWluIHVzaW5nIHRoZSBgbzFqc2AgbGlicmFyeS4gSXQgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBzdGVwczpcblxuIyMgSW1wb3J0aW5nIE5lY2Vzc2FyeSBNb2R1bGVzXG5cbmBgYGphdmFzY3JpcHRcbmltcG9ydCB7IE1pbmEsIEFjY291bnRVcGRhdGUgfSBmcm9tICdvMWpzJ1xuaW1wb3J0IHsgRWFzeU1pbmEgfSBmcm9tICdlYXN5bWluYSdcbmltcG9ydCB7IFNxdWFyZSB9IGZyb20gJy4uL2NvbnRyYWN0cy9idWlsZC9TcXVhcmUuanMnXG5gYGBcblxuSW4gdGhpcyBzZWN0aW9uLCB3ZSBpbXBvcnQgdGhlIHJlcXVpcmVkIG1vZHVsZXMgYW5kIGxpYnJhcmllcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgTWluYSBQcm90b2NvbC4gYG8xanNgIHByb3ZpZGVzIGVzc2VudGlhbCBmdW5jdGlvbmFsaXR5LCBhbmQgd2UgYWxzbyBpbXBvcnQgdGhlIGBFYXN5TWluYWAgY2xhc3MgYW5kIGEgc21hcnQgY29udHJhY3QgY2xhc3MgbmFtZWQgYFNxdWFyZWAuXG5cbiMjIFNldHRpbmcgVXAgdGhlIE1pbmEgTmV0d29ya1xuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn8J+MkCBBZGRpbmcgTmV0d29yaycpXG5jb25zdCBCZXJrZWxleSA9IE1pbmEuTmV0d29yayggXG4gICAgICdodHRwczovL3Byb3h5LmJlcmtlbGV5Lm1pbmFleHBsb3Jlci5jb20vZ3JhcGhxbCcgXG4gICAgLy8naHR0cHM6Ly9hcGkubWluYXNjYW4uaW8vbm9kZS9iZXJrZWxleS92MS9ncmFwaHFsJ1xuKVxuTWluYS5zZXRBY3RpdmVJbnN0YW5jZShCZXJrZWxleSlcbmBgYFxuXG5IZXJlLCB3ZSBzcGVjaWZ5IGFuZCBhY3RpdmF0ZSB0aGUgTWluYSBuZXR3b3JrIGJ5IHByb3ZpZGluZyB0aGUgR3JhcGhRTCBlbmRwb2ludC4gVGhlIHNjcmlwdCBpcyBjb25maWd1cmVkIHRvIGludGVyYWN0IHdpdGggdGhlIEJlcmtlbGV5IG5ldHdvcmsgb2YgdGhlIE1pbmEgUHJvdG9jb2wuXG5cbiMjIEluaXRpYWxpemluZyBFYXN5TWluYVxuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn4pyoIEFkZGluZyBFYXN5TWluYScpXG5jb25zdCBlYXN5TWluYSA9IG5ldyBFYXN5TWluYSggeyAnbmV0d29ya05hbWUnOiAnYmVya2VsZXknIH0gKVxuYGBgXG5cbldlIGluaXRpYWxpemUgYW4gaW5zdGFuY2Ugb2YgdGhlIGBFYXN5TWluYWAgY2xhc3MsIHNwZWNpZnlpbmcgdGhlIG5ldHdvcmsgbmFtZSBhcyAnYmVya2VsZXkuJyBUaGlzIGluc3RhbmNlIHNpbXBsaWZpZXMgdmFyaW91cyBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgTWluYSBQcm90b2NvbC5cblxuIyMgSW1wb3J0aW5nIEFjY291bnRzXG5cbmBgYGphdmFzY3JpcHRcbmNvbnNvbGUubG9nKCfwn5SRIEltcG9ydGluZyBBY2NvdW50cycpXG5jb25zdCBkZXBsb3llciA9IGF3YWl0IGVhc3lNaW5hLmdldEFjY291bnQoIHtcbiAgICAnbmFtZSc6ICdhbGljZScsXG4gICAgJ2dyb3VwTmFtZSc6ICdhJyxcbiAgICAnY2hlY2tTdGF0dXMnOiB0cnVlLCAvLyBvcHRpb25hbCwgY2hlY2tzIGlmIGFjY291bnQgaGFzIGJhbGFuY2VcbiAgICAnc3RyaWN0JzogdHJ1ZSAvLyBvcHRpb25hbCwgdGhyb3cgYW4gZXJyb3IgaWYgYWNjb3VudCBoYXMgbm8gYmFsYW5jZVxufSApXG5jb25zb2xlLmxvZygnICAgRXhwbG9yZXI6JywgZGVwbG95ZXJbJ2V4cGxvcmVyJ10pXG5gYGBcblxuVGhpcyBzZWN0aW9uIGltcG9ydHMgYW4gYWNjb3VudCBuYW1lZCAnYWxpY2UnIGZyb20gdGhlICdhJyBncm91cCB1c2luZyB0aGUgYGdldEFjY291bnRgIG1ldGhvZC4gSXQgb3B0aW9uYWxseSBjaGVja3MgdGhlIGFjY291bnQncyBzdGF0dXMgYW5kIHRocm93cyBhbiBlcnJvciBpZiB0aGUgYWNjb3VudCBoYXMgbm8gYmFsYW5jZS4gVGhlIGFjY291bnQgaW5mb3JtYXRpb24sIGluY2x1ZGluZyB0aGUgJ2V4cGxvcmVyJyBwcm9wZXJ0eSwgaXMgbG9nZ2VkLlxuXG4jIyBJbXBvcnRpbmcgYW5kIENvbXBpbGluZyB0aGUgQ29udHJhY3RcblxuYGBgamF2YXNjcmlwdFxuY29uc29sZS5sb2coJ/Cfk5wgSW1wb3J0aW5nIENvbnRyYWN0JylcbmNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgZWFzeU1pbmEucmVxdWVzdENvbnRyYWN0KCB7XG4gICAgJ25hbWUnOiAnc3F1YXJlJyxcbiAgICAnc291cmNlUGF0aCc6ICcuLi9jb250cmFjdHMvYnVpbGQvU3F1YXJlLmpzJyxcbiAgICBkZXBsb3llclxufSApXG5cbmNvbnNvbGUubG9nKCfwn6ewIENvbXBpbGluZyBDbGFzcycpXG5jb25zdCB6a0FwcCA9IG5ldyBTcXVhcmUoY29udHJhY3RbJ3B1YmxpY0tleSddWydmaWVsZCddKVxuY29uc3QgeyB2ZXJpZmljYXRpb25LZXkgfSA9IGF3YWl0IFNxdWFyZS5jb21waWxlKClcbmBgYFxuXG5JbiB0aGlzIHBhcnQsIHRoZSBzY3JpcHQgaW1wb3J0cyB0aGUgJ3NxdWFyZScgY29udHJhY3QgYW5kIGNvbXBpbGVzIGl0LiBUaGUgY29udHJhY3QncyBwdWJsaWMga2V5IGlzIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgYHprQXBwYCBvYmplY3QuIFRoZSB2ZXJpZmljYXRpb24ga2V5IGlzIGV4dHJhY3RlZCBmcm9tIHRoZSBjb21waWxlZCBjb250cmFjdC5cblxuIyMgUHJlcGFyaW5nIGFuZCBQcm92aW5nIFRyYW5zYWN0aW9uc1xuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn8J+agCBQcmVwYXJpbmcgVHJhbnNhY3Rpb25zJylcbmNvbnN0IHR4ID0gYXdhaXQgTWluYS50cmFuc2FjdGlvbihcbiAgICB7XG4gICAgICAgICdmZWVQYXllcktleSc6IGRlcGxveWVyWydwcml2YXRlS2V5J11bJ2ZpZWxkJ10sXG4gICAgICAgICdmZWUnOiAxMDBfMDAwXzAwMCxcbiAgICAgICAgJ21lbW8nOiAnaGVsbG8gd29ybGQhJ1xuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgICAgICBBY2NvdW50VXBkYXRlLmZ1bmROZXdBY2NvdW50KGRlcGxveWVyWydwcml2YXRlS2V5J11bJ2ZpZWxkJ10pXG4gICAgICAgIHprQXBwLmRlcGxveSh7XG4gICAgICAgICAgICAnemthcHBLZXknOiBjb250cmFjdFsncHJpdmF0ZUtleSddWydmaWVsZCddLFxuICAgICAgICAgICAgdmVyaWZpY2F0aW9uS2V5LFxuICAgICAgICAgICAgJ3prQXBwVXJpJzogJ2hlbGxvLXdvcmxkJ1xuICAgICAgICB9KVxuICAgICAgICB6a0FwcC5pbml0KClcbiAgICB9XG4pXG5cbmNvbnNvbGUubG9nKCfwn5SNIFByb3ZpbmcgVHJhbnNhY3Rpb24nKVxuYXdhaXQgdHgucHJvdmUoKVxuYGBgXG5cbkhlcmUsIHRoZSBzY3JpcHQgcHJlcGFyZXMgYW5kIGNvbmZpZ3VyZXMgYSB0cmFuc2FjdGlvbiwgc3BlY2lmeWluZyB0aGUgZmVlLCBmZWUgcGF5ZXIsIGFuZCBtZW1vLiBJdCBmdW5kcyB0aGUgZGVwbG95ZXIgYWNjb3VudCBhbmQgZGVwbG95cyB0aGUgJ3prQXBwJyB3aXRoIGl0cyBhc3NvY2lhdGVkIGtleXMgYW5kIGEgJ3prQXBwVXJpLicgQWZ0ZXJ3YXJkLCBpdCBwcm92ZXMgdGhlIHRyYW5zYWN0aW9uLlxuXG4jIyBTaWduaW5nIGFuZCBTZW5kaW5nIFRyYW5zYWN0aW9uc1xuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn4pyN77iPICBTaWduaW5nIFRyYW5zYWN0aW9uJylcbmNvbnN0IHNpZ25lZE1lc3NhZ2UgPSB0eC5zaWduKFsgXG4gICAgZGVwbG95ZXJbJ3ByaXZhdGVLZXknXVsnZmllbGQnXSwgXG4gICAgY29udHJhY3RbJ3ByaXZhdGVLZXknXVsnZmllbGQnXSBcbl0pXG5cbmNvbnNvbGUubG9nKCfwn5qaIFNlbmRpbmcgVHJhbnNhY3Rpb24nKVxuY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzaWduZWRNZXNzYWdlLnNlbmQoKVxuYGBgXG5cblRoaXMgc2VjdGlvbiBzaWducyB0aGUgdHJhbnNhY3Rpb24gd2l0aCB0aGUgZGVwbG95ZXIncyBhbmQgY29udHJhY3QncyBwcml2YXRlIGtleXMuIFRoZW4sIGl0IHNlbmRzIHRoZSBzaWduZWQgdHJhbnNhY3Rpb24uXG5cbiMjIFNhdmluZyB0aGUgRGVwbG95ZWQgQ29udHJhY3RcblxuYGBgamF2YXNjcmlwdFxuY29uc29sZS5sb2coJ/Cfkr4gU2F2aW5nIENvbnRyYWN0JylcbmNvbnN0IGRlcGxveWVkQ29udHJhY3QgPSBhd2FpdCBlYXN5TWluYS5zYXZlQ29udHJhY3QoeyBcbiAgICByZXNwb25zZSxcbiAgICB2ZXJpZmljYXRpb25LZXlcbn0pXG5cbmNvbnNvbGUubG9nKCcgICBFeHBsb3JlcjonLCBkZXBsb3llZENvbnRyYWN0WydoZWFkZXInXVsndHhIYXNoRXhwbG9yZXInXSlcbmBgYFxuXG5GaW5hbGx5LCB0aGUgc2NyaXB0IHNhdmVzIHRoZSBkZXBsb3llZCBjb250cmFjdCBhbmQgbG9ncyBpdHMgYXNzb2NpYXRlZCB0cmFuc2FjdGlvbiBoYXNoIGluIHRoZSBleHBsb3Jlci4iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJkZXN0aW5hdGlvbiI6ICJiYWNrZW5kLzEtZGVwbG95LXNtYXJ0LWNvbnRyYWN0Lm1qcyIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiAiaW1wb3J0ICogYXMgbzFqcyBmcm9tICdvMWpzJ1xuaW1wb3J0IHsgTWluYSwgQWNjb3VudFVwZGF0ZSB9IGZyb20gJ28xanMnXG5pbXBvcnQgeyBFYXN5TWluYSB9IGZyb20gJ2Vhc3ltaW5hJ1xuaW1wb3J0IHsgU3F1YXJlIH0gZnJvbSAnLi4vY29udHJhY3RzL2J1aWxkL1NxdWFyZS5qcydcblxuY29uc29sZS5sb2coJ/CfjJAgQWRkaW5nIE5ldHdvcmsnKVxuY29uc3QgQmVya2VsZXkgPSBNaW5hLk5ldHdvcmsoIFxuICAgICAnaHR0cHM6Ly9wcm94eS5iZXJrZWxleS5taW5hZXhwbG9yZXIuY29tL2dyYXBocWwnIFxuICAgIC8vJ2h0dHBzOi8vYXBpLm1pbmFzY2FuLmlvL25vZGUvYmVya2VsZXkvdjEvZ3JhcGhxbCdcbilcbk1pbmEuc2V0QWN0aXZlSW5zdGFuY2UoQmVya2VsZXkpXG5cbmNvbnNvbGUubG9nKCfinKggQWRkaW5nIEVhc3lNaW5hJylcbmNvbnN0IGVhc3lNaW5hID0gbmV3IEVhc3lNaW5hKCB7ICduZXR3b3JrTmFtZSc6ICdiZXJrZWxleScsIG8xanMgfSApXG5cbmNvbnNvbGUubG9nKCfwn5SRIEltcG9ydGluZyBBY2NvdW50cycpXG5jb25zdCBkZXBsb3llciA9IGF3YWl0IGVhc3lNaW5hLmdldEFjY291bnQoIHtcbiAgICAnbmFtZSc6ICdhbGljZScsXG4gICAgJ2dyb3VwTmFtZSc6ICdhJyxcbiAgICAnY2hlY2tTdGF0dXMnOiB0cnVlLCAvLyBvcHRpb25hbCwgY2hlY2tzIGlmIGFjY291bnQgaGFzIGJhbGFuY2VcbiAgICAnc3RyaWN0JzogdHJ1ZSAvLyBvcHRpb25hbCwgdGhyb3cgYW4gZXJyb3IgaWYgYWNjb3VudCBoYXMgbm8gYmFsYW5jZVxufSApXG5jb25zb2xlLmxvZygnICAgRXhwbG9yZXI6JywgZGVwbG95ZXJbJ2V4cGxvcmVyJ10pXG5cbmNvbnNvbGUubG9nKCfwn5OcIEltcG9ydGluZyBDb250cmFjdCcpXG5jb25zdCBjb250cmFjdCA9IGF3YWl0IGVhc3lNaW5hLnJlcXVlc3RDb250cmFjdCgge1xuICAgICduYW1lJzogJ2hlbGxvLXdvcmxkJyxcbiAgICAnc291cmNlUGF0aCc6ICcuLi9jb250cmFjdHMvYnVpbGQvU3F1YXJlLmpzJyxcbiAgICBkZXBsb3llclxufSApXG5cbmNvbnNvbGUubG9nKCfwn6ewIENvbXBpbGluZyBDbGFzcycpXG5jb25zdCB6a0FwcCA9IG5ldyBTcXVhcmUoY29udHJhY3RbJ3B1YmxpY0tleSddWydmaWVsZCddKVxuY29uc3QgeyB2ZXJpZmljYXRpb25LZXkgfSA9IGF3YWl0IFNxdWFyZS5jb21waWxlKClcblxuY29uc29sZS5sb2coJ/CfmoAgUHJlcGFyaW5nIFRyYW5zYWN0aW9ucycpXG5jb25zdCB0eCA9IGF3YWl0IE1pbmEudHJhbnNhY3Rpb24oXG4gICAge1xuICAgICAgICAnZmVlUGF5ZXJLZXknOiBkZXBsb3llclsncHJpdmF0ZUtleSddWydmaWVsZCddLFxuICAgICAgICAnZmVlJzogMTAwXzAwMF8wMDAsXG4gICAgICAgICdtZW1vJzogJ2hlbGxvIHdvcmxkISdcbiAgICB9LFxuICAgICgpID0+IHtcbiAgICAgICAgQWNjb3VudFVwZGF0ZS5mdW5kTmV3QWNjb3VudChkZXBsb3llclsncHJpdmF0ZUtleSddWydmaWVsZCddKVxuICAgICAgICB6a0FwcC5kZXBsb3koe1xuICAgICAgICAgICAgJ3prYXBwS2V5JzogY29udHJhY3RbJ3ByaXZhdGVLZXknXVsnZmllbGQnXSxcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvbktleSxcbiAgICAgICAgICAgICd6a0FwcFVyaSc6ICdoZWxsby13b3JsZCdcbiAgICAgICAgfSlcbiAgICAgICAgemtBcHAuaW5pdCgpXG4gICAgfVxuKVxuXG5jb25zb2xlLmxvZygn8J+UjSBQcm92aW5nIFRyYW5zYWN0aW9uJylcbmF3YWl0IHR4LnByb3ZlKClcblxuY29uc29sZS5sb2coJ+Kcje+4jyAgU2lnbmluZyBUcmFuc2FjdGlvbicpXG5jb25zdCBzaWduZWRNZXNzYWdlID0gdHguc2lnbihbIFxuICAgIGRlcGxveWVyWydwcml2YXRlS2V5J11bJ2ZpZWxkJ10sIFxuICAgIGNvbnRyYWN0Wydwcml2YXRlS2V5J11bJ2ZpZWxkJ10gXG5dKVxuXG5jb25zb2xlLmxvZygn8J+amiBTZW5kaW5nIFRyYW5zYWN0aW9uJylcbmNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2lnbmVkTWVzc2FnZS5zZW5kKClcblxuY29uc29sZS5sb2coJ/Cfkr4gU2F2aW5nIENvbnRyYWN0JylcbmNvbnN0IGRlcGxveWVkQ29udHJhY3QgPSBhd2FpdCBlYXN5TWluYS5zYXZlQ29udHJhY3QoeyBcbiAgICByZXNwb25zZSxcbiAgICB2ZXJpZmljYXRpb25LZXlcbn0pXG5cbmNvbnNvbGUubG9nKCcgICBFeHBsb3JlcjonLCBkZXBsb3llZENvbnRyYWN0WydoZWFkZXInXVsndHhIYXNoRXhwbG9yZXInXSlcbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImRlc3RpbmF0aW9uIjogImJhY2tlbmQvMi1jYWxsLW1ldGhvZC5tZCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiAiIyBJbnRlcmFjdGluZyB3aXRoIE1pbmEgUHJvdG9jb2wgVXNpbmcgRWFzeU1pbmFcblxuVGhpcyBzY3JpcHQgZGVtb25zdHJhdGVzIGhvdyB0byBpbnRlcmFjdCB3aXRoIHRoZSBNaW5hIFByb3RvY29sIGJsb2NrY2hhaW4gdXNpbmcgdGhlIGBvMWpzYCBsaWJyYXJ5IGFuZCB0aGUgYEVhc3lNaW5hYCBtb2R1bGUuIEl0IHBlcmZvcm1zIHZhcmlvdXMgdGFza3MsIGluY2x1ZGluZyBuZXR3b3JrIGNvbmZpZ3VyYXRpb24sIGltcG9ydGluZyBhbiBhY2NvdW50LCB3b3JraW5nIHdpdGggYSBkZXBsb3llZCBzbWFydCBjb250cmFjdCwgYW5kIGV4ZWN1dGluZyB0cmFuc2FjdGlvbnMuIEhlcmUncyBhIGJyZWFrZG93biBvZiB0aGUgc2NyaXB0J3Mga2V5IHN0ZXBzOlxuXG4jIyBJbXBvcnRpbmcgTmVjZXNzYXJ5IE1vZHVsZXNcblxuYGBgamF2YXNjcmlwdFxuaW1wb3J0IHsgTWluYSwgRmllbGQgfSBmcm9tICdvMWpzJ1xuaW1wb3J0IHsgRWFzeU1pbmEgfSBmcm9tICdlYXN5bWluYSdcbmBgYFxuXG5JbiB0aGlzIHNlY3Rpb24sIHRoZSBzY3JpcHQgaW1wb3J0cyByZXF1aXJlZCBtb2R1bGVzIGFuZCBsaWJyYXJpZXMsIGluY2x1ZGluZyBgTWluYWAgYW5kIGBGaWVsZGAgZnJvbSBgbzFqc2AsIGFzIHdlbGwgYXMgdGhlIGN1c3RvbSBgRWFzeU1pbmFgIG1vZHVsZS5cblxuIyMgU2V0dGluZyBVcCB0aGUgTWluYSBOZXR3b3JrXG5cbmBgYGphdmFzY3JpcHRcbmNvbnNvbGUubG9nKCfwn4yQIEFkZGluZyBOZXR3b3JrLi4uJylcbmNvbnN0IEJlcmtlbGV5ID0gTWluYS5OZXR3b3JrKCBcbiAgICAnaHR0cHM6Ly9wcm94eS5iZXJrZWxleS5taW5hZXhwbG9yZXIuY29tL2dyYXBocWwnIFxuICAgIC8vICdodHRwczovL2FwaS5taW5hc2Nhbi5pby9ub2RlL2JlcmtlbGV5L3YxL2dyYXBocWwnXG4pXG5NaW5hLnNldEFjdGl2ZUluc3RhbmNlKEJlcmtlbGV5KVxuYGBgXG5cbkhlcmUsIHRoZSBzY3JpcHQgc2V0cyB1cCB0aGUgTWluYSBuZXR3b3JrIGJ5IHNwZWNpZnlpbmcgdGhlIEdyYXBoUUwgZW5kcG9pbnQsIGVuYWJsaW5nIGNvbW11bmljYXRpb24gd2l0aCB0aGUgQmVya2VsZXkgbmV0d29yayBvZiB0aGUgTWluYSBQcm90b2NvbC5cblxuIyMgSW5pdGlhbGl6aW5nIEVhc3lNaW5hXG5cbmBgYGphdmFzY3JpcHRcbmNvbnNvbGUubG9nKCfinKggQWRkaW5nIEVhc3lNaW5hLi4uJylcbmNvbnN0IGVhc3lNaW5hID0gbmV3IEVhc3lNaW5hKHsgJ25ldHdvcmtOYW1lJzogJ2JlcmtlbGV5JyB9KVxuYGBgXG5cbkFuIGluc3RhbmNlIG9mIGBFYXN5TWluYWAgaXMgY3JlYXRlZCwgc2ltcGxpZnlpbmcgaW50ZXJhY3Rpb25zIHdpdGggdGhlIE1pbmEgUHJvdG9jb2wuIFRoZSBuZXR3b3JrIG5hbWUgaXMgc2V0IHRvICdiZXJrZWxleScgdG8gaW5kaWNhdGUgdGhlIHRhcmdldCBuZXR3b3JrLlxuXG4jIyBJbXBvcnRpbmcgYW4gQWNjb3VudFxuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn8J+UkSBJbXBvcnRpbmcgQWNjb3VudC4uLicpXG5jb25zdCBkZXBsb3llciA9IGF3YWl0IGVhc3lNaW5hLmdldEFjY291bnQoe1xuICAgICduYW1lJzogJ2JvYicsXG4gICAgJ2dyb3VwTmFtZSc6ICdhJyxcbiAgICAnY2hlY2tTdGF0dXMnOiB0cnVlLFxuICAgICdzdHJpY3QnOiB0cnVlXG59KVxuY29uc29sZS5sb2coJyAgIEV4cGxvcmVyOicsIGRlcGxveWVyWydleHBsb3JlciddKVxuYGBgXG5cblRoaXMgc2VjdGlvbiBpbXBvcnRzIGFuIGFjY291bnQgbmFtZWQgJ2JvYicgZnJvbSB0aGUgJ2EnIGdyb3VwIHVzaW5nIHRoZSBgZ2V0QWNjb3VudGAgbWV0aG9kLiBJdCBjaGVja3MgdGhlIGFjY291bnQncyBzdGF0dXMgYW5kIGxvZ3MgdGhlIGFjY291bnQncyAnZXhwbG9yZXInIHByb3BlcnR5LlxuXG4jIyBJbXBvcnRpbmcgYSBEZXBsb3llZCBDb250cmFjdFxuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn8J+TnSBBZGRpbmcgQ29udHJhY3QuLi4nKVxuY29uc3QgY29udHJhY3QgPSBhd2FpdCBlYXN5TWluYS5nZXREZXBsb3llZENvbnRyYWN0KHtcbiAgICAnbmFtZSc6ICdzcXVhcmUnLFxuICAgICdwcm9qZWN0TmFtZSc6ICdnZXR0aW5nLXN0YXJ0ZWQnXG59KVxuY29uc29sZS5sb2coJyAgIEV4cGxvcmVyOicsIGNvbnRyYWN0WydleHBsb3JlciddKVxuYGBgXG5cblRoZSBzY3JpcHQgaW1wb3J0cyBhIGRlcGxveWVkIHNtYXJ0IGNvbnRyYWN0IG5hbWVkICdzcXVhcmUnIHdpdGggdGhlIHByb2plY3QgbmFtZSAnZ2V0dGluZy1zdGFydGVkJyB1c2luZyB0aGUgYGdldERlcGxveWVkQ29udHJhY3RgIG1ldGhvZC4gSXQgbG9ncyB0aGUgY29udHJhY3QncyAnZXhwbG9yZXInIHByb3BlcnR5LlxuXG4jIyBMb2FkaW5nIFNtYXJ0IENvbnRyYWN0IENvZGVcblxuYGBgamF2YXNjcmlwdFxuY29uc29sZS5sb2coJ/Cfk4QgTG9hZGluZyBTbWFydCBDb250cmFjdCBDb2RlLi4uJylcbmNvbnN0IHsgc291cmNlQ29kZSB9ID0gY29udHJhY3RcbmNvbnN0IHsgU3F1YXJlIH0gPSBhd2FpdCBlYXN5TWluYS5sb2FkTW9kdWxlRXhwZXJpbWVudGFsKHsgc291cmNlQ29kZSB9KVxuYGBgXG5cblRoaXMgcGFydCBsb2FkcyB0aGUgc291cmNlIGNvZGUgb2YgdGhlIHNtYXJ0IGNvbnRyYWN0IGFuZCBleHRyYWN0cyB0aGUgYFNxdWFyZWAgY2xhc3MgdXNpbmcgYGxvYWRNb2R1bGVFeHBlcmltZW50YWxgLiBJdCBwcmVwYXJlcyB0aGUgY29udHJhY3QgY29kZSBmb3IgZnVydGhlciB1c2UuXG5cbiMjIENvbXBpbGluZyBhbmQgUHJlcGFyaW5nIFRyYW5zYWN0aW9uc1xuXG5gYGBqYXZhc2NyaXB0XG5jb25zb2xlLmxvZygn8J+agCBDb21waWxpbmcuLi4nKVxuY29uc3QgemtBcHBJbnN0YW5jZSA9IG5ldyBTcXVhcmUoY29udHJhY3RbJ3B1YmxpY0tleSddWydmaWVsZCddKVxuXG5jb25zb2xlLmxvZygn8J+nqiBDb21waWxpbmcgKGF3YWl0ZWQpLi4uJylcbmF3YWl0IFNxdWFyZS5jb21waWxlKClcblxuY29uc29sZS5sb2coJ/Cfk5wgUHJlcGFyZSBUcmFuc2FjdGlvbnMuLi4nKVxuY29uc3QgdHggPSBhd2FpdCBNaW5hLnRyYW5zYWN0aW9uKFxuICAgIHtcbiAgICAgICAgJ2ZlZVBheWVyS2V5JzogZGVwbG95ZXJbJ3ByaXZhdGVLZXknXVsnZmllbGQnXSxcbiAgICAgICAgJ2ZlZSc6IDEwMF8wMDBfMDAwLFxuICAgICAgICAnbWVtbyc6ICdhYmMnXG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgICAgIHprQXBwSW5zdGFuY2UudXBkYXRlKCBGaWVsZCggOSApICkgXG4gICAgfVxuKVxuYGBgXG5cbkluIHRoaXMgc2VjdGlvbiwgdGhlIHNjcmlwdCBjcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBgU3F1YXJlYCBjbGFzcywgYXdhaXRzIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgY29udHJhY3QsIGFuZCBwcmVwYXJlcyBhIHRyYW5zYWN0aW9uLiBUaGUgdHJhbnNhY3Rpb24gaW5jbHVkZXMgZGV0YWlscyBzdWNoIGFzIHRoZSBmZWUgcGF5ZXIsIGZlZSBhbW91bnQsIG1lbW8sIGFuZCBwZXJmb3JtcyBhbiB1cGRhdGUgb3BlcmF0aW9uIG9uIHRoZSBzbWFydCBjb250cmFjdC4gTm90ZSB0aGF0IHdpdGggZWFjaCBleGVjdXRpb24sIHRoZSBudW1iZXIgaW4gdGhlIGBGaWVsZGAgY2xhc3MgbmVlZHMgdG8gYmUgYWRqdXN0ZWQsIGZvciBleGFtcGxlLCA5LCA4MSwgNjU2MSwgNDMwNDY3MjEuLi5cblxuIyMgUHJvdmluZywgU2lnbmluZywgYW5kIFNlbmRpbmcgVHJhbnNhY3Rpb25zXG5cbmBgYGphdmFzY3JpcHRcbmNvbnNvbGUubG9nKCfwn5SNIFByb3ZpbmcgVHJhbnNhY3Rpb24uLi4nKVxuYXdhaXQgdHgucHJvdmUoKVxuXG5jb25zb2xlLmxvZygn4pyN77iPIFNpZ25pbmcgVHJhbnNhY3Rpb24uLi4nKVxuY29uc3Qgc2lnbmVkTWVzc2FnZSA9IHR4LnNpZ24oW2RlcGxveWVyWydwcml2YXRlS2V5J11bJ2ZpZWxkJ11dKVxuXG5jb25zb2xlLmxvZygn8J+amiBTZW5kaW5nIFRyYW5zYWN0aW9uLi4uJylcbmNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2lnbmVkTWVzc2FnZS5zZW5kKClcbmNvbnNvbGUubG9nKGAgICBFeHBsb3JlciBVUkw6IGh0dHBzOi8vbWluYXNjYW4uaW8vYmVya2VsZXkvdHgvJHtyZXNwb25zZS5oYXNoKCl9YClcbmBgYFxuXG5UaGUgc2NyaXB0IHByb3ZlcyB0aGUgdHJhbnNhY3Rpb24sIHNpZ25zIGl0IHVzaW5nIHRoZSBkZXBsb3llcidzIHByaXZhdGUga2V5LCBhbmQgc2VuZHMgdGhlIHRyYW5zYWN0aW9uLiBJdCBhbHNvIGxvZ3MgdGhlIGV4cGxvcmVyIFVSTCBvZiB0aGUgdHJhbnNhY3Rpb24gZm9yIHJlZmVyZW5jZS4iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJkZXN0aW5hdGlvbiI6ICJiYWNrZW5kLzItY2FsbC1tZXRob2QubWpzIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6ICJpbXBvcnQgKiBhcyBvMWpzIGZyb20gJ28xanMnXG5jb25zdCB7IE1pbmEsIEZpZWxkIH0gPSBvMWpzXG5pbXBvcnQgeyBFYXN5TWluYSB9IGZyb20gJ2Vhc3ltaW5hJ1xuXG5jb25zb2xlLmxvZygn8J+MkCBBZGRpbmcgTmV0d29yay4uLicpXG5jb25zdCBCZXJrZWxleSA9IE1pbmEuTmV0d29yayggXG4gICAgLy8gJ2h0dHBzOi8vcHJveHkuYmVya2VsZXkubWluYWV4cGxvcmVyLmNvbS9ncmFwaHFsJyBcbiAgICAnaHR0cHM6Ly9hcGkubWluYXNjYW4uaW8vbm9kZS9iZXJrZWxleS92MS9ncmFwaHFsJ1xuKVxuTWluYS5zZXRBY3RpdmVJbnN0YW5jZShCZXJrZWxleSlcbiBcbmNvbnNvbGUubG9nKCfinKggQWRkaW5nIEVhc3lNaW5hLi4uJylcbmNvbnN0IGVhc3lNaW5hID0gbmV3IEVhc3lNaW5hKHsgJ25ldHdvcmtOYW1lJzogJ2JlcmtlbGV5JywgbzFqcyB9KVxuXG5jb25zb2xlLmxvZygn8J+UkSBJbXBvcnRpbmcgQWNjb3VudC4uLicpXG5jb25zdCBkZXBsb3llciA9IGF3YWl0IGVhc3lNaW5hLmdldEFjY291bnQoe1xuICAgICduYW1lJzogJ2FsaWNlJyxcbiAgICAnZ3JvdXBOYW1lJzogJ2EnLFxuICAgICdjaGVja1N0YXR1cyc6IHRydWUsXG4gICAgJ3N0cmljdCc6IHRydWVcbn0pXG5jb25zb2xlLmxvZygnICAgRXhwbG9yZXI6JywgZGVwbG95ZXJbJ2V4cGxvcmVyJ10pXG5cbmNvbnNvbGUubG9nKCfwn5OdIEFkZGluZyBDb250cmFjdC4uLicpXG5jb25zdCBjb250cmFjdCA9IGF3YWl0IGVhc3lNaW5hLmdldERlcGxveWVkQ29udHJhY3Qoe1xuICAgICduYW1lJzogJ2xldmVsJyxcbiAgICAncHJvamVjdE5hbWUnOiAnaGVsbG8td29ybGQnXG59KVxuY29uc29sZS5sb2coJyAgIEV4cGxvcmVyOicsIGNvbnRyYWN0WydleHBsb3JlciddKVxuXG5jb25zb2xlLmxvZygn8J+ThCBMb2FkaW5nIFNtYXJ0IENvbnRyYWN0IENvZGUuLi4nKVxuY29uc3QgeyBzb3VyY2VDb2RlIH0gPSBjb250cmFjdFxuY29uc3QgeyBTcXVhcmUgfSA9IGF3YWl0IGVhc3lNaW5hLmxvYWRNb2R1bGVFeHBlcmltZW50YWwoeyBzb3VyY2VDb2RlIH0pXG5cbmNvbnNvbGUubG9nKCfwn5qAIENvbXBpbGluZy4uLicpXG5jb25zdCB6a0FwcEluc3RhbmNlID0gbmV3IFNxdWFyZShjb250cmFjdFsncHVibGljS2V5J11bJ2ZpZWxkJ10pXG5cbmNvbnNvbGUubG9nKCfwn6eqIENvbXBpbGluZyAoYXdhaXRlZCkuLi4nKVxuYXdhaXQgU3F1YXJlLmNvbXBpbGUoKVxuXG5jb25zb2xlLmxvZygn8J+TnCBQcmVwYXJlIFRyYW5zYWN0aW9ucy4uLicpXG5jb25zdCB0eCA9IGF3YWl0IE1pbmEudHJhbnNhY3Rpb24oXG4gICAge1xuICAgICAgICAnZmVlUGF5ZXJLZXknOiBkZXBsb3llclsncHJpdmF0ZUtleSddWydmaWVsZCddLFxuICAgICAgICAnZmVlJzogMTAwXzAwMF8wMDAsXG4gICAgICAgICdtZW1vJzogJ2FiYydcbiAgICB9LFxuICAgICgpID0+IHtcbiAgICAgICAgemtBcHBJbnN0YW5jZS51cGRhdGUoIEZpZWxkKCAxODUzMDIwMTg4ODUxODQxICkgKSBcbiAgICB9XG4pXG5cbmNvbnNvbGUubG9nKCfwn5SNIFByb3ZpbmcgVHJhbnNhY3Rpb24uLi4nKVxuYXdhaXQgdHgucHJvdmUoKVxuXG5jb25zb2xlLmxvZygn4pyN77iPIFNpZ25pbmcgVHJhbnNhY3Rpb24uLi4nKVxuY29uc3Qgc2lnbmVkTWVzc2FnZSA9IHR4LnNpZ24oW2RlcGxveWVyWydwcml2YXRlS2V5J11bJ2ZpZWxkJ11dKVxuXG5jb25zb2xlLmxvZygn8J+amiBTZW5kaW5nIFRyYW5zYWN0aW9uLi4uJylcbmNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc2lnbmVkTWVzc2FnZS5zZW5kKClcbmNvbnNvbGUubG9nKGAgICBFeHBsb3JlciBVUkw6IGh0dHBzOi8vbWluYXNjYW4uaW8vYmVya2VsZXkvdHgvJHtyZXNwb25zZS5oYXNoKCl9YClcbiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImNvbnRyYWN0cyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiZGVzdGluYXRpb24iOiAiY29udHJhY3RzL1NxdWFyZS50cyIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiAiaW1wb3J0IHtcbiAgICBGaWVsZCxcbiAgICBTbWFydENvbnRyYWN0LFxuICAgIHN0YXRlLFxuICAgIFN0YXRlLFxuICAgIG1ldGhvZCxcbiAgfSBmcm9tICdvMWpzJztcblxuXG5leHBvcnQgY2xhc3MgU3F1YXJlIGV4dGVuZHMgU21hcnRDb250cmFjdCB7XG4gICAgQHN0YXRlKEZpZWxkKSBudW0gPSBTdGF0ZTxGaWVsZD4oKTtcblxuXG4gICAgaW5pdCgpIHtcbiAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgIHRoaXMubnVtLnNldChGaWVsZCgzKSk7XG4gICAgfVxuXG5cbiAgICBAbWV0aG9kIHVwZGF0ZShzcXVhcmU6IEZpZWxkKSB7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLm51bS5nZXQoKTtcbiAgICAgIHRoaXMubnVtLmFzc2VydEVxdWFscyhjdXJyZW50U3RhdGUpO1xuICAgICAgc3F1YXJlLmFzc2VydEVxdWFscyhjdXJyZW50U3RhdGUubXVsKGN1cnJlbnRTdGF0ZSkpO1xuICAgICAgdGhpcy5udW0uc2V0KHNxdWFyZSk7XG4gICAgfVxufSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImRlc3RpbmF0aW9uIjogImNvbnRyYWN0cy9idWlsZC9TcXVhcmUuanMiLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50IjogInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG5pbXBvcnQgeyBGaWVsZCwgU21hcnRDb250cmFjdCwgc3RhdGUsIFN0YXRlLCBtZXRob2QsIH0gZnJvbSAnbzFqcyc7XG5leHBvcnQgY2xhc3MgU3F1YXJlIGV4dGVuZHMgU21hcnRDb250cmFjdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubnVtID0gU3RhdGUoKTtcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLm51bS5zZXQoRmllbGQoMykpO1xuICAgIH1cbiAgICB1cGRhdGUoc3F1YXJlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMubnVtLmdldCgpO1xuICAgICAgICB0aGlzLm51bS5hc3NlcnRFcXVhbHMoY3VycmVudFN0YXRlKTtcbiAgICAgICAgc3F1YXJlLmFzc2VydEVxdWFscyhjdXJyZW50U3RhdGUubXVsKGN1cnJlbnRTdGF0ZSkpO1xuICAgICAgICB0aGlzLm51bS5zZXQoc3F1YXJlKTtcbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBzdGF0ZShGaWVsZCksXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcbl0sIFNxdWFyZS5wcm90b3R5cGUsIFwibnVtXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBtZXRob2QsXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEZ1bmN0aW9uKSxcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0ZpZWxkXSksXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjpyZXR1cm50eXBlXCIsIHZvaWQgMClcbl0sIFNxdWFyZS5wcm90b3R5cGUsIFwidXBkYXRlXCIsIG51bGwpO1xuIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiZnJvbnRlbmQiOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImRlc3RpbmF0aW9uIjogImZyb250ZW5kL3NlbmQuaHRtbCIsCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQiOiAiPCFET0NUWVBFIGh0bWw+XG48aHRtbCBsYW5nPVwiZW5cIj5cbjxoZWFkPlxuICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiPlxuICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXCI+XG4gICAgPHN0eWxlPlxuICAgICAgICAucHJvY2Vzcy1jb250YWluZXIge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOyAvKiBTcGVjaWZ5IGEgbm9uLXNlcmlmIGZvbnQgKi9cbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7IC8qIEFsaWduIHN0ZXBzIHRvIHRoZSBsZWZ0ICovXG4gICAgICAgIH1cbiAgICAgICAgLnN0ZXAge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICB3aWR0aDogNDAwcHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICAgICAgY29sb3I6ICM3Nzc7IC8qIFVzZSBhIGRpZmZlcmVudCBzaGFkZSBvZiBncmF5ICgjNzc3KSAqL1xuICAgICAgICB9XG4gICAgICAgIC5hY3RpdmUtc3RlcCB7XG4gICAgICAgICAgICBjb2xvcjogYmxhY2s7IC8qIFRleHQgY29sb3IgZm9yIGFjdGl2ZSBzdGVwcyAqL1xuICAgICAgICB9XG4gICAgICAgIC5kb25lLXN0ZXAge1xuICAgICAgICAgICAgY29sb3I6ICM3Nzc7IC8qIFVzZSB0aGUgc2FtZSBncmF5ICgjNzc3KSBmb3IgZG9uZSBzdGVwcyAqL1xuICAgICAgICB9XG4gICAgICAgIC5lcnJvci1zdGVwIHtcbiAgICAgICAgICAgIGNvbG9yOiByZWQ7IC8qIFRleHQgY29sb3IgZm9yIGVycm9yIHN0ZXBzICovXG4gICAgICAgIH1cbiAgICAgICAgLnN0ZXAtY2lyY2xlIHtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYzsgLyogRGVmYXVsdCBjaXJjbGUgY29sb3IgKi9cbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTsgLyogTWFrZSBpdCBjaXJjdWxhciAqL1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4OyAvKiBTcGFjZSBiZXR3ZWVuIGNpcmNsZSBhbmQgc3RlcCB0ZXh0ICovXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IC8qIENlbnRlciB0aGUgY29udGVudCAoc3RhdHVzKSBpbiB0aGUgY2lyY2xlICovXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC5kb25lLXN0ZXAgLnN0ZXAtY2lyY2xlIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0Q0FGNTA7IC8qIEdyZWVuIGNvbG9yIGZvciBkb25lIHN0ZXBzICovXG4gICAgICAgIH1cbiAgICAgICAgLnN0ZXAtY29udGVudCB7XG4gICAgICAgICAgICBmbGV4LWdyb3c6IDE7IC8qIEV4cGFuZCB0byBmaWxsIGF2YWlsYWJsZSBzcGFjZSAqL1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDsgLyogQWRkIHJpZ2h0IHBhZGRpbmcgYmV0d2VlbiBjb250ZW50IGFuZCBidXR0b24gKi9cbiAgICAgICAgfVxuICAgICAgICAuc3RlcC10aXRsZSB7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgfVxuICAgICAgICAuc3RlcC1kZXNjcmlwdGlvbiB7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICAgIH1cbiAgICAgICAgLnN0ZXAtbWVzc2FnZSB7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICAgIH1cbiAgICAgICAgLnN0ZXAtZHJvcGRvd24ge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBwYWRkaW5nOiA1cHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICB9XG4gICAgICAgIC5zdGVwLWJ1dHRvbiB7XG4gICAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjY2M7IC8qIERlZmF1bHQgYnV0dG9uIGNvbG9yIGZvciBpbmFjdGl2ZSBzdGVwcyAqL1xuICAgICAgICAgICAgY29sb3I6IHdoaXRlOyAvKiBTZXQgdGV4dCBjb2xvciB0byB3aGl0ZSBmb3IgaW5hY3RpdmUgYnV0dG9ucyAqL1xuICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDsgLyogQ2hhbmdlIGN1cnNvciBmb3IgaW5hY3RpdmUgYnV0dG9ucyAqL1xuICAgICAgICB9XG4gICAgICAgIC5hY3RpdmUtc3RlcCAuc3RlcC1idXR0b24ge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN0JGRjsgLyogQWN0aXZlIHN0ZXAgYnV0dG9uIGNvbG9yICovXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7IC8qIENoYW5nZSBjdXJzb3IgZm9yIGFjdGl2ZSBidXR0b25zICovXG4gICAgICAgIH1cbiAgICA8L3N0eWxlPlxuICAgIDxzY3JpcHQgc3JjPVwiLi9zcmMvVUkuanNcIj48L3NjcmlwdD5cbiAgICA8c2NyaXB0IHNyYz1cIi4vc3JjL1N0ZXAuanNcIj48L3NjcmlwdD5cbjwvaGVhZD5cbjxib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJwcm9jZXNzLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGlkPVwiYXVyb1wiIGNsYXNzPVwic3RlcCBkb25lLXN0ZXBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGVwLWNpcmNsZSBkb25lLXN0ZXBcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGVwLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RlcC10aXRsZVwiPkNvbm5lY3QgQXVybyBXYWxsZXQ8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RlcC1kZXNjcmlwdGlvblwiPkNob29zZSBOZXR3b3JrPC9kaXY+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cInN0ZXAtZHJvcGRvd25cIiBvbmNoYW5nZT1cImhhbmRsZURyb3Bkb3duQ2hhbmdlKHRoaXMpXCIgZGlzYWJsZWQ+PC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0ZXAtbWVzc2FnZVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGVwLW1lc3NhZ2VcIj48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN0ZXAtYnV0dG9uXCIgIG9uY2xpY2s9XCJoYW5kbGVCdXR0b25DbGljaygnYXVybycpXCIgZGlzYWJsZWQ+Q29ubmVjdDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIm8xanNcIiBjbGFzcz1cInN0ZXAgYWN0aXZlLXN0ZXBcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGVwLWNpcmNsZVwiPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0ZXAtY29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGVwLXRpdGxlXCI+SW1wb3J0IG8xanM8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RlcC1kZXNjcmlwdGlvblwiPkNob29zZSBsb2NhdGlvbjwvZGl2PlxuICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XCJzdGVwLWRyb3Bkb3duXCIgb25jaGFuZ2U9XCJoYW5kbGVEcm9wZG93bkNoYW5nZSh0aGlzKVwiPjwvc2VsZWN0PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGVwLW1lc3NhZ2VcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RlcC1tZXNzYWdlXCI+PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzdGVwLWJ1dHRvblwiIG9uY2xpY2s9XCJoYW5kbGVCdXR0b25DbGljaygnbzFqcycpXCI+SW1wb3J0PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwic21hcnRDb250cmFjdFwiIGNsYXNzPVwic3RlcFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0ZXAtY2lyY2xlXCI+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RlcC1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0ZXAtdGl0bGVcIj5JbXBvcnQgU21hcnQgQ29udHJhY3Q8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RlcC1kZXNjcmlwdGlvblwiPkNob29zZSBQcm9qZWN0PC9kaXY+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz1cInN0ZXAtZHJvcGRvd25cIiBvbmNoYW5nZT1cImhhbmRsZURyb3Bkb3duQ2hhbmdlKHRoaXMpXCIgZGlzYWJsZWQ+PC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0ZXAtbWVzc2FnZVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGVwLW1lc3NhZ2VcIj48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN0ZXAtYnV0dG9uXCIgb25jbGljaz1cImhhbmRsZUJ1dHRvbkNsaWNrKCdzbWFydENvbnRyYWN0JylcIiBkaXNhYmxlZD5JbXBvcnQ8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8c2NyaXB0PlxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVCdXR0b25DbGljaygga2V5ICkge1xuICAgICAgICAgICAgaWYoIHR5cGVvZiBzdGVwICE9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICAgICAgICBzdGVwLmJ1dHRvblByZXNzZWQoIHsga2V5IH0gKVxuICAgICAgICAgICAgICAgICAgICAudGhlbiggYSA9PiBhIClcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCBlID0+IGNvbnNvbGUubG9nKCBlICkgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWxsIDMgdmFyaWFibGVzIGFyZSBnbG9iYWwgYW5kIGF2YWlsYWJsZSBpbiB0aGUgY29uc29sZS5cbiAgICAgICAgdmFyIGVhc3ltaW5hXG4gICAgICAgIHZhciBvMWpzXG4gICAgICAgIHZhciBzbWFydENvbnRyYWN0XG5cbiAgICAgICAgdmFyIHN0ZXAgPSBuZXcgU3RlcCgpXG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgICAgICAgICBhd2FpdCBzdGVwLmluaXQoKVxuICAgICAgICB9XG5cbiAgICAgICAgbWFpbigpXG4gICAgICAgICAgICAudGhlbiggYSA9PiBjb25zb2xlLmxvZyggYSApIClcbiAgICAgICAgICAgIC5jYXRjaCggZSA9PiBjb25zb2xlLmxvZyggZSApIClcbiAgICA8L3NjcmlwdD5cbjwvYm9keT5cbjwvaHRtbD5cbiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImRlc3RpbmF0aW9uIjogImZyb250ZW5kL3NyYy9TdGVwLmpzIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6ICJjb25zdCB1aSA9IG5ldyBVSSgpXG5cblxuY29uc3QgU3RlcCA9IGNsYXNzIFN0ZXAgZXh0ZW5kcyBFdmVudFRhcmdldCB7XG4gICAgI2NvbmZpZ1xuICAgICNzdGF0ZVxuXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICB0aGlzLiNjb25maWcgPSB7XG4gICAgICAgICAgICAnYXVybyc6IHtcbiAgICAgICAgICAgICAgICAndmFsaWROZXR3b3Jrcyc6IFsgJ2Rldm5ldCcsICdiZXJrZWxleScsICd0ZXN0d29ybGQyJywgJ21haW5uZXQnIF0sXG4gICAgICAgICAgICAgICAgJ29wdGlvbnMnOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgJ3RleHQnOiAnQmVya2VsZXknLCAndmFsdWUnOiAnYmVya2VsZXknIH0sXG4vKlxuICAgICAgICAgICAgICAgICAgICB7ICd0ZXh0JzogJ1Rlc3R3b3JsZCAyJywgJ3ZhbHVlJzogJ3Rlc3R3b3JsZDInIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgJ3RleHQnOiAnTWFpbm5ldCcsICd2YWx1ZSc6ICdtYWlubmV0JyB9LFxuICAgICAgICAgICAgICAgICAgICB7ICd0ZXh0JzogJ0RldiBOZXQnLCAndmFsdWUnOiAnZGV2bmV0JyB9XG4qL1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnbzFqcyc6IHtcbiAgICAgICAgICAgICAgICAnb3B0aW9ucyc6IFtcbiAgICAgICAgICAgICAgICAgICAgeyAndGV4dCc6ICdMb2NhbCcsICd2YWx1ZSc6ICcvYXBpL2dldExvY2FsTzFqcycgfSxcbiAgICAgICAgICAgICAgICAgICAgeyAndGV4dCc6ICdDRE4nLCAndmFsdWUnOiAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9vMWpzJyB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdzbWFydENvbnRyYWN0Jzoge1xuICAgICAgICAgICAgICAgICdvcHRpb25zJzogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICAnYXVybyc6IHtcbiAgICAgICAgICAgICAgICAnZXhpc3RzJzogZmFsc2UsXG4gICAgICAgICAgICAgICAgJ2FjY291bnQnOiBudWxsLFxuICAgICAgICAgICAgICAgICduZXR3b3JrJzogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdvMWpzJzoge1xuICAgICAgICAgICAgICAgICd1cmwnOiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3NtYXJ0Q29udHJhY3QnOiB7XG4gICAgICAgICAgICAgICAgJ3VybCc6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvZ2V0Q29udHJhY3RzJylcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuXG4gICAgICAgIHRoaXMuI2NvbmZpZ1snc21hcnRDb250cmFjdCddWydvcHRpb25zJ10gPSBkYXRhWydkYXRhJ11cbiAgICAgICAgICAgIC5tYXAoIGNvbnRyYWN0TmFtZSA9PiB7IFxuICAgICAgICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IHsgXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0JzogY29udHJhY3ROYW1lLCBcbiAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogYC9hcGkvZ2V0Q29udHJhY3RTb3VyY2VDb2RlLyR7Y29udHJhY3ROYW1lfS5qc2AgXG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RydWN0XG4gICAgICAgICAgICB9IClcblxuICAgICAgICB0aGlzLiNhZGRTZWxlY3RPcHRpb25zKClcbiAgICAgICAgdWkuY2hhbmdlU3RhdHVzUm93cyggeyAnc3RhdGUnOiAnd2FpdGluZycgfSApXG4gICAgICAgIHVpLmNoYW5nZVN0YXR1c1JvdyggeyAnc3RhdGUnOiAnYWN0aXZlJywgJ2tleSc6ICdhdXJvJyB9IClcblxuXG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cblxuICAgIGFzeW5jIGJ1dHRvblByZXNzZWQoIHsga2V5IH0gKSB7XG4gICAgICAgIHN3aXRjaCgga2V5ICkge1xuICAgICAgICAgICAgY2FzZSAnYXVybyc6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jc2V0QXVybygpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ28xanMnOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI3NldEltcG9ydCgpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3NtYXJ0Q29udHJhY3QnOiBcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNzZXRTbWFydENvbnRyYWN0KClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnY29tcGlsZSc6XG4gICAgICAgICAgICAgICAgLy8gYXdhaXQgdGhpcy4jY29tcGlsZVNtYXJ0Q29udHJhY3QoKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBgQnV0dG9uIHdpdGggdGhlIGtleSAnJHtrZXl9JyBub3Qga25vd24uYCApXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuI3VwZGF0ZUdsb2JhbFZhcmlhYmxlKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cblxuICAgICNjb21waWxlU21hcnRDb250cmFjdCgpIHtcbiAgICAgICAgY29uc3QgeyBTcXVhcmUgfSA9IHNtYXJ0Q29udHJhY3RcbiAgICB9XG5cblxuICAgICNhZGRTZWxlY3RPcHRpb25zKCkge1xuICAgICAgICB1aS5zZXRTZWxlY3RPcHRpb25zKCB7IFxuICAgICAgICAgICAgJ2tleSc6ICdhdXJvJywgXG4gICAgICAgICAgICAnb3B0aW9ucyc6IHRoaXMuI2NvbmZpZ1snYXVybyddWydvcHRpb25zJ10gXG4gICAgICAgIH0gKVxuXG4gICAgICAgIHVpLnNldFNlbGVjdE9wdGlvbnMoIHsgXG4gICAgICAgICAgICAna2V5JzogJ28xanMnLCBcbiAgICAgICAgICAgICdvcHRpb25zJzogdGhpcy4jY29uZmlnWydvMWpzJ11bJ29wdGlvbnMnXVxuICAgICAgICB9IClcblxuICAgICAgICB1aS5zZXRTZWxlY3RPcHRpb25zKCB7IFxuICAgICAgICAgICAgJ2tleSc6ICdzbWFydENvbnRyYWN0JywgXG4gICAgICAgICAgICAnb3B0aW9ucyc6IHRoaXMuI2NvbmZpZ1snc21hcnRDb250cmFjdCddWydvcHRpb25zJ11cbiAgICAgICAgfSApXG4gICAgfVxuXG5cbiAgICBhc3luYyAjc2V0QXVybygpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IGF3YWl0IHRoaXMuI3ZhbGlkYXRlU2V0QXVybygpXG4gICAgICAgIGNvbnN0IFsgbWVzc2FnZXMsIGNvbW1lbnRzLCBhY2NvdW50cywgbmV0d29yayBdID0gdmFsaWRhdGlvblxuICAgICAgICB0aGlzLiNwcmludE1lc3NhZ2VzKCB7IG1lc3NhZ2VzLCBjb21tZW50cyB9IClcbiAgICAgICAgdGhpcy4jc3RhdGVbJ2F1cm8nXVsnZXhpc3RzJ10gPSBtZXNzYWdlcy5sZW5ndGggPT09IDAgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgaWYoICF0aGlzLiNzdGF0ZVsnYXVybyddWydleGlzdHMnXSApIHsgXG4gICAgICAgICAgICBjb25zdCByb3dzID0gWyBtZXNzYWdlcy5qb2luKCcsICcgKSwgJycgXVxuICAgICAgICAgICAgdWkuc2V0UmVzcG9uc2VUZXh0KCB7ICdrZXknOiAnYXVybycsIHJvd3MgfSApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZSBcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuI3N0YXRlWydhdXJvJ11bJ2FjY291bnQnXSA9IGFjY291bnRzWyAwIF1cblxuICAgICAgICBjb25zdCB0YXJnZXRDaGFpbiA9IHVpLmdldFNlbGVjdE9wdGlvbiggeyAna2V5JzogJ2F1cm8nIH0gKVxuICAgICAgICBpZiggbmV0d29ya1snY2hhaW5JZCddICE9PSB0YXJnZXRDaGFpbiApIHtcbiAgICAgICAgICAgIGF3YWl0IG1pbmEuc3dpdGNoQ2hhaW4oIHsgJ2NoYWluSWQnOiB0YXJnZXRDaGFpbiB9IClcbiAgICAgICAgICAgIGNvbnN0IG5ld05ldHdvcmsgPSBhd2FpdCBtaW5hLnJlcXVlc3ROZXR3b3JrKClcbiAgICAgICAgICAgIHRoaXMuI3N0YXRlWydhdXJvJ11bJ25ldHdvcmsnXSA9IG5ld05ldHdvcmtbJ2NoYWluSWQnXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jc3RhdGVbJ2F1cm8nXVsnbmV0d29yayddID0gbmV0d29ya1snY2hhaW5JZCddXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXNzYWdlID0gYEFjY291bnQ6ICR7dGhpcy4jc3RhdGVbJ2F1cm8nXVsnYWNjb3VudCddfSwgTmV0d29yazogJHt0aGlzLiNzdGF0ZVsnYXVybyddWyduZXR3b3JrJ119LmBcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGAke3RoaXMuI3N0YXRlWydhdXJvJ11bJ2FjY291bnQnXS5zdWJzdHJpbmcoMCwgOCl9Li4uJHt0aGlzLiNzdGF0ZVsnYXVybyddWydhY2NvdW50J10uc3Vic3RyaW5nKCA1MSwgNTUgKX1gXG4gICAgICAgIHVpLnNldFJlc3BvbnNlVGV4dCgge1xuICAgICAgICAgICAgJ2tleSc6ICdhdXJvJyxcbiAgICAgICAgICAgICdyb3dzJzogWyBgQWNjb3VudDogJHthZGRyZXNzfWAsIGBOZXR3b3JrOiAke3RoaXMuI3N0YXRlWydhdXJvJ11bJ25ldHdvcmsnXX1gXVxuICAgICAgICB9IClcbiAgICAgICAgdWkubmV4dFN0ZXAoKVxuXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG5cbiAgICBhc3luYyAjdmFsaWRhdGVTZXRBdXJvKCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IFtdXG4gICAgICAgIGNvbnN0IGNvbW1lbnRzID0gW11cbiAgICAgICAgbGV0IGFjY291bnRzXG4gICAgICAgIGxldCBuZXR3b3JrXG5cbiAgICAgICAgaWYoIHR5cGVvZiBtaW5hID09PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goIGBBdXJvIFdhbGxldCBpcyBub3QgYXZhaWxhYmxlLmAgKVxuICAgICAgICB9XG5cbiAgICAgICBpZiggbWVzc2FnZXMubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhY2NvdW50cyA9IGF3YWl0IG1pbmEucmVxdWVzdEFjY291bnRzKClcbiAgICAgICAgICAgIH0gY2F0Y2goIGUgKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaCggYEF1cm8gLnJlcXVlc3RBY2NvdW50cygpIGZhaWxlZC4gJHtlfWAgKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5ldHdvcmsgPSBhd2FpdCBtaW5hLnJlcXVlc3ROZXR3b3JrKClcbiAgICAgICAgICAgIH0gY2F0Y2goIGUgKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaCggYEF1cm8gLnJlcXVlc3ROZXR3b3JrKCkgZmFpbGVkLiAke2V9YCApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCAhQXJyYXkuaXNBcnJheSggYWNjb3VudHMgKSApIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKCBgQWNjb3VudCBpcyBub3QgYXJyYXkuYCApXG4gICAgICAgICAgICB9IGVsc2UgaWYoIGFjY291bnRzLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKCBgTm90IGFjY291bnQgY29ubmVjdGVkLmAgKSBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tbWVudHMucHVzaCggYCR7YWNjb3VudHMubGVuZ3RofSBBY2NvdW50JHthY2NvdW50cy5sZW5ndGggPT09IDAgPyAnJyA6ICdzJyB9IGNvbm5lY3RlZCAoJHthY2NvdW50cy5qb2luKCAnLCAnICl9KS5gKVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmKCB0eXBlb2YgbmV0d29yayAhPT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaCggYE5ldHdvcmsgaXMgbm90IG9iamVjdC5gIClcbiAgICAgICAgICAgIH0gZWxzZSBpZiggIW5ldHdvcmsuaGFzT3duUHJvcGVydHkoICdjaGFpbklkJyApICkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goIGBOZXR3b3JrIGhhcyBub3QgdGhlIGtleSAnY2hhaW5JZCcuYCApIFxuICAgICAgICAgICAgfSBlbHNlIGlmKCAhdGhpcy4jY29uZmlnWydhdXJvJ11bJ3ZhbGlkTmV0d29ya3MnXS5pbmNsdWRlcyggbmV0d29ya1snY2hhaW5JZCddICkgKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXMucHVzaCggYE5ldHdvcmsgd2l0aCB0aGUgdmFsdWUgJyR7bmV0d29ya30nIGlzIG5vdCB2YWxpZC5gIClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29tbWVudHMucHVzaCggYE5ldHdvcmsgaXMgc2V0IHRvICR7bmV0d29ya1snY2hhaW5JZCddfS5gIClcbiAgICAgICAgICAgIH1cbiAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFsgbWVzc2FnZXMsIGNvbW1lbnRzLCBhY2NvdW50cywgbmV0d29yayBdXG4gICAgfVxuXG5cbiAgICBhc3luYyAjc2V0SW1wb3J0KCkge1xuICAgICAgICBjb25zdCB1cmwgPSB1aS5nZXRTZWxlY3RPcHRpb24oIHsgJ2tleSc6ICdvMWpzJyB9IClcbiAgICAgICAgbzFqcyA9IGF3YWl0IGltcG9ydCggdXJsIClcblxuICAgICAgICB0aGlzLiNzdGF0ZVsnbzFqcyddWyd1cmwnXSA9IHVybFxuXG4gICAgICAgIHVpLnNldFJlc3BvbnNlVGV4dCgge1xuICAgICAgICAgICAgJ2tleSc6ICdvMWpzJyxcbiAgICAgICAgICAgICdyb3dzJzogWyBgU3VjY2VzZnVsIGxvYWRlZC5gIF1cbiAgICAgICAgfSApXG4gICAgICAgIHVpLm5leHRTdGVwKClcblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuXG4gICAgYXN5bmMgI3NldFNtYXJ0Q29udHJhY3QoKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IHVpLmdldFNlbGVjdE9wdGlvbiggeyAna2V5JzogJ3NtYXJ0Q29udHJhY3QnIH0gKVxuICAgICAgICBzbWFydENvbnRyYWN0ID0gYXdhaXQgaW1wb3J0KCB1cmwgKVxuXG4gICAgICAgIHVpLnNldFJlc3BvbnNlVGV4dCgge1xuICAgICAgICAgICAgJ2tleSc6ICdzbWFydENvbnRyYWN0JyxcbiAgICAgICAgICAgICdyb3dzJzogWyBgU3VjY2VzZnVsIGxvYWRlZC5gIF1cbiAgICAgICAgfSApXG5cbiAgICAgICAgLy8gdWkubmV4dFN0ZXAoKVxuXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG5cbiAgICAjdXBkYXRlR2xvYmFsVmFyaWFibGUoKSB7XG4gICAgICAgIGVhc3ltaW5hID0gT2JqZWN0XG4gICAgICAgICAgICAuZW50cmllcyggdGhpcy4jc3RhdGUgKVxuICAgICAgICAgICAgLnJlZHVjZSggKCBhY2MsIGEsIGluZGV4ICkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IFsga2V5LCB2YWx1ZSBdID0gYVxuICAgICAgICAgICAgICAgICFPYmplY3QuaGFzT3duKCBhY2MsIGtleSApID8gYWNjWyBrZXkgXSA9IHt9IDogJydcbiAgICAgICAgICAgICAgICBPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgLmVudHJpZXMoIHZhbHVlIClcbiAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goIGIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgWyBrLCB2IF0gPSBiXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NbIGtleSBdWyBrIF0gPSB2XG4gICAgICAgICAgICAgICAgICAgIH0gKVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgICAgIH0sIHt9IClcblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuXG4gICAgI3ByaW50TWVzc2FnZXMoIHsgbWVzc2FnZXM9W10sIGNvbW1lbnRzPVtdIH0gKSB7XG4gICAgICAgIGNvbnN0IG4gPSBbXG4gICAgICAgICAgICBbIGNvbW1lbnRzLCAnQ29tbWVudCcsIGZhbHNlIF0sXG4gICAgICAgICAgICBbIG1lc3NhZ2VzLCAnRXJyb3InLCB0cnVlIF1cbiAgICAgICAgXVxuICAgICAgICAgICAgLmZvckVhY2goICggYSwgaW5kZXggKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgWyBtc2dzLCBoZWFkbGluZSwgc3RvcCBdID0gYVxuICAgICAgICAgICAgICAgIG1zZ3NcbiAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goICggbXNnLCByaW5kZXgsIGFsbCApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpbmRleCA9PT0gMCA/IGNvbnNvbGUubG9nKCBgXFxuJHtoZWFkbGluZX0ke2FsbC5sZW5ndGggPiAxID8gJ3MnIDogJyd9OmAgKSA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggYCAgLSAke21zZ31gIClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoIGFsbC5sZW5ndGggLSAxICkgPT09IHJpbmRleCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggc3RvcCA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9IClcbiAgICBcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG59IgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiZGVzdGluYXRpb24iOiAiZnJvbnRlbmQvc3JjL1VJLmpzIiwKICAgICAgICAgICAgICAgICAgICAiY29udGVudCI6ICJjb25zdCBVSSA9IGNsYXNzIFVJIGV4dGVuZHMgRXZlbnRUYXJnZXQge1xuICAgICNjb25maWdcbiAgICAjc3RhdGVcblxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgdGhpcy4jY29uZmlnID0ge1xuICAgICAgICAgICAgJ3N0YXRlcyc6IHtcbiAgICAgICAgICAgICAgICAnZG9uZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzTmFtZSc6ICdzdGVwIGRvbmUtc3RlcCcsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGVDbGFzc05hbWUnOiAnc3RlcC1jaXJjbGUgZG9uZS1zdGVwJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NlbGVjdERpc2FibGUnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAnYnV0dG9uRGlzYWJsZSc6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdhY3RpdmUnOiB7XG4gICAgICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAnc3RlcCBhY3RpdmUtc3RlcCcsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGVDbGFzc05hbWUnOiAnc3RlcC1jaXJjbGUgZG9uZS1zdGVwJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NlbGVjdERpc2FibGUnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgJ2J1dHRvbkRpc2FibGUnOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ3dhaXRpbmcnOiB7XG4gICAgICAgICAgICAgICAgICAgICdjbGFzc05hbWUnOiAnc3RlcCcsXG4gICAgICAgICAgICAgICAgICAgICdjaXJjbGVDbGFzc05hbWUnOiAnc3RlcC1jaXJjbGUnLFxuICAgICAgICAgICAgICAgICAgICAnc2VsZWN0RGlzYWJsZSc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICdidXR0b25EaXNhYmxlJzogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnZG9tJzoge1xuICAgICAgICAgICAgICAgICdhdXJvJzoge1xuICAgICAgICAgICAgICAgICAgICAnc2VsZWN0JzogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ28xanMnOiB7XG4gICAgICAgICAgICAgICAgICAgICdzZWxlY3QnOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnc21hcnRDb250cmFjdCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3NlbGVjdCc6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgICdhY3RpdmVLZXknOiBudWxsXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGNoYW5nZVN0YXR1c1Jvd3MoIHsgc3RhdGUgfSApIHtcbiAgICAgICAgY29uc29sZS5sb2coICdkaXNhYmxlJylcbiAgICAgICAgT2JqZWN0XG4gICAgICAgICAgICAua2V5cyggdGhpcy4jY29uZmlnWydkb20nXSApXG4gICAgICAgICAgICAuZm9yRWFjaCgga2V5ID0+IHRoaXMuY2hhbmdlU3RhdHVzUm93KCB7IGtleSwgc3RhdGUgfSApIClcblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuXG4gICAgY2hhbmdlU3RhdHVzUm93KCB7IGtleSwgc3RhdGUgfSApIHtcbiAgICAgICAgaWYoIHN0YXRlID09PSAnYWN0aXZlJyApIHtcbiAgICAgICAgICAgIHRoaXMuI3N0YXRlWydhY3RpdmVLZXknXSA9IGtleVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgga2V5IClcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLiNjb25maWdbJ3N0YXRlcyddWyBzdGF0ZSBdWydjbGFzc05hbWUnXVxuXG4gICAgICAgIGlmKCB0aGlzLiNjb25maWdbJ2RvbSddWyBrZXkgXVsnc2VsZWN0J10gKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudFxuICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCBgIyR7a2V5fSBzZWxlY3Quc3RlcC1kcm9wZG93bmAgKVxuICAgICAgICAgICAgc2VsZWN0LmRpc2FibGVkID0gdGhpcy4jY29uZmlnWydzdGF0ZXMnXVsgc3RhdGUgXVsnc2VsZWN0RGlzYWJsZSddXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoIGAjJHtrZXl9IGJ1dHRvbi5zdGVwLWJ1dHRvbmAgKVxuICAgICAgICBidXR0b24uZGlzYWJsZWQgPSB0aGlzLiNjb25maWdbJ3N0YXRlcyddWyBzdGF0ZSBdWydidXR0b25EaXNhYmxlJ11cblxuICAgICAgICBjb25zdCBjaXJjbGUgPSBlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICBjaXJjbGUuY2xhc3NOYW1lID0gdGhpcy4jY29uZmlnWydzdGF0ZXMnXVsgc3RhdGUgXVsnY2lyY2xlQ2xhc3NOYW1lJ11cblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuXG4gICAgc2V0U2VsZWN0T3B0aW9ucyggeyBrZXksIG9wdGlvbnMgfSApIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnRcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCBgIyR7a2V5fSBzZWxlY3Quc3RlcC1kcm9wZG93bmAgKVxuXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIC5mb3JFYWNoKCBvcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ29wdGlvbicgKVxuICAgICAgICAgICAgICAgIGVsLnRleHQgPSBvcHRpb25bJ3RleHQnXVxuICAgICAgICAgICAgICAgIGVsLnZhbHVlID0gb3B0aW9uWyd2YWx1ZSddXG4gICAgICAgICAgICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKCBlbCApXG4gICAgICAgICAgICB9IClcblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gXG5cblxuICAgIHNldFJlc3BvbnNlVGV4dCggeyBrZXksIHJvd3MgfSApIHtcbiAgICAgICAgY29uc3QgZGl2cyA9IGRvY3VtZW50XG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvckFsbCggYCMke2tleX0gZGl2LnN0ZXAtbWVzc2FnZWAgKVxuXG4gICAgICAgIHJvd3NcbiAgICAgICAgICAgIC5mb3JFYWNoKCAoIHJvdywgaW5kZXggKSA9PiB7XG4gICAgICAgICAgICAgICAgZGl2c1sgaW5kZXggXS50ZXh0Q29udGVudCA9IHJvd1xuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgXG4gICAgXG4gICAgZ2V0U2VsZWN0T3B0aW9uKCB7IGtleSB9ICkge1xuICAgICAgICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoIGAjJHtrZXl9IHNlbGVjdC5zdGVwLWRyb3Bkb3duYCApXG4gICAgICAgIHJldHVybiBzZWxlY3Qub3B0aW9uc1sgc2VsZWN0LnNlbGVjdGVkSW5kZXggXS52YWx1ZVxuICAgIH1cblxuXG4gICAgbmV4dFN0ZXAoKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3RcbiAgICAgICAgICAgIC5rZXlzKCB0aGlzLiNjb25maWdbJ2RvbSddIClcbiAgICAgICAgY29uc3QgaW5kZXggPSBrZXlzXG4gICAgICAgICAgICAuZmluZEluZGV4KCBhID0+IGEgPT09IHRoaXMuI3N0YXRlWydhY3RpdmVLZXknXSApXG5cbiAgICAgICAgaWYoIGtleXMubGVuZ3RoID09PSBpbmRleCApIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdHVzUm93KCB7IFxuICAgICAgICAgICAgICAgICdrZXknOiBrZXlzWyBpbmRleCBdLCBcbiAgICAgICAgICAgICAgICAnc3RhdGUnOiAnZG9uZSdcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0dXNSb3coIHsgXG4gICAgICAgICAgICAgICAgJ2tleSc6IGtleXNbIGluZGV4IF0sIFxuICAgICAgICAgICAgICAgICdzdGF0ZSc6ICdkb25lJ1xuICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdHVzUm93KCB7IFxuICAgICAgICAgICAgICAgICdrZXknOiBrZXlzWyBpbmRleCArIDEgXSwgXG4gICAgICAgICAgICAgICAgJ3N0YXRlJzogJ2FjdGl2ZSdcbiAgICAgICAgICAgIH0gKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG59IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgfQogICAgfQp9