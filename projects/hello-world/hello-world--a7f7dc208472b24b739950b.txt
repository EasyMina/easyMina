data:application/json;base64,{
    "name": "square-example",
    "description": "",
    "encrypt": false,
    "created": "2024-01-17 03:38:51 PM",
    "content": {
        "created": "2024-01-17 03:38:51 PM",
        "projectName": "hello-world",
        "rootPath": "projects/hello-world",
        "folders": {
            "root": [
                {
                    "destination": "tsconfig.json",
                    "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2019\",\n        \"module\": \"es2022\",\n        \"lib\": [\n            \"dom\",\n            \"esnext\"\n        ],\n        \"outDir\": \"./contracts/build\",\n        \"rootDir\": \"./contracts\",\n        \"strict\": true,\n        \"strictPropertyInitialization\": false,\n        \"skipLibCheck\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"esModuleInterop\": true,\n        \"resolveJsonModule\": true,\n        \"moduleResolution\": \"node\",\n        \"experimentalDecorators\": true,\n        \"emitDecoratorMetadata\": true,\n        \"allowJs\": true,\n        \"declaration\": false,\n        \"sourceMap\": false,\n        \"noFallthroughCasesInSwitch\": true,\n        \"allowSyntheticDefaultImports\": true,\n        \"isolatedModules\": true\n    },\n    \"include\": [\n        \"./contracts/**/*.ts\"\n    ],\n    \"exclude\": [\n        \"./contracts/build\"\n    ]\n}"
                }
            ],
            "backend": [
                {
                    "destination": "backend/0-create-accounts.mjs",
                    "content": "import { EasyMina } from 'easymina'\n\nconsole.log('✨ Adding EasyMina...')\nconst easyMina = new EasyMina( { 'networkName': 'berkeley' })\n\nconsole.log('🔑 Creating Accounts...')\nconst deployers = await easyMina.createAccounts({\n    'names': ['alice', 'bob', 'charlie'],\n    'groupName': 'a'\n})\n\nconsole.log('🚀 Deployers Ready.')\n"
                },
                {
                    "destination": "backend/1-deploy-smart-contract.mjs",
                    "content": "import { Mina, AccountUpdate } from 'o1js'\nimport { EasyMina } from 'easymina'\nimport { Square } from '../contracts/build/Square.js'\n\nconsole.log('🌐 Adding Network')\nconst Berkeley = Mina.Network( \n     'https://proxy.berkeley.minaexplorer.com/graphql' \n    //'https://api.minascan.io/node/berkeley/v1/graphql'\n)\nMina.setActiveInstance(Berkeley)\n\nconsole.log('✨ Adding EasyMina')\nconst easyMina = new EasyMina( { 'networkName': 'berkeley' } )\n\nconsole.log('🔑 Importing Accounts')\nconst deployer = await easyMina.getAccount( {\n    'name': 'charlie',\n    'groupName': 'a',\n    'checkStatus': true, // optional, checks if account has balance\n    'strict': true // optional, throw an error if account has no balance\n} )\nconsole.log('   Explorer:', deployer['explorer'])\n\nconsole.log('📜 Importing Contract')\nconst contract = await easyMina.requestContract( {\n    'name': 'level',\n    'sourcePath': '../contracts/build/Square.js',\n    deployer\n} )\n\nconsole.log('🧰 Compiling Class')\nconst zkApp = new Square(contract['publicKey']['field'])\nconst { verificationKey } = await Square.compile()\n\nconsole.log('🚀 Preparing Transactions')\nconst tx = await Mina.transaction(\n    {\n        'feePayerKey': deployer['privateKey']['field'],\n        'fee': 100_000_000,\n        'memo': 'hello world!'\n    },\n    () => {\n        AccountUpdate.fundNewAccount(deployer['privateKey']['field'])\n        zkApp.deploy({\n            'zkappKey': contract['privateKey']['field'],\n            verificationKey,\n            'zkAppUri': 'hello-world'\n        })\n        zkApp.init()\n    }\n)\n\nconsole.log('🔍 Proving Transaction')\nawait tx.prove()\n\nconsole.log('✍️  Signing Transaction')\nconst signedMessage = tx.sign([ \n    deployer['privateKey']['field'], \n    contract['privateKey']['field'] \n])\n\nconsole.log('🚚 Sending Transaction')\nconst response = await signedMessage.send()\n\nconsole.log('💾 Saving Contract')\nconst deployedContract = await easyMina.saveContract({ \n    response,\n    verificationKey\n})\n\nconsole.log('   Explorer:', deployedContract['header']['txHashExplorer'])\n"
                },
                {
                    "destination": "backend/2-call-method.mjs",
                    "content": "import { Mina, Field } from 'o1js'\nimport { EasyMina } from 'easymina'\n\nconsole.log('🌐 Adding Network...')\nconst Berkeley = Mina.Network( \n    'https://proxy.berkeley.minaexplorer.com/graphql' \n    // 'https://api.minascan.io/node/berkeley/v1/graphql'\n)\nMina.setActiveInstance(Berkeley)\n \nconsole.log('✨ Adding EasyMina...')\nconst easyMina = new EasyMina({ 'networkName': 'berkeley' })\n\nconsole.log('🔑 Importing Account...')\nconst deployer = await easyMina.getAccount({\n    'name': 'bob',\n    'groupName': 'a',\n    'checkStatus': true,\n    'strict': true\n})\nconsole.log('   Explorer:', deployer['explorer'])\n\nconsole.log('📝 Adding Contract...')\nconst contract = await easyMina.getDeployedContract({\n    'name': 'square',\n    'projectName': 'getting-started'\n})\nconsole.log('   Explorer:', contract['explorer'])\n\nconsole.log('📄 Loading Smart Contract Code...')\nconst { sourceCode } = contract\nconst { Square } = await easyMina.loadModuleExperimental({ sourceCode })\n\nconsole.log('🚀 Compiling...')\nconst zkAppInstance = new Square(contract['publicKey']['field'])\n\nconsole.log('🧪 Compiling (awaited)...')\nawait Square.compile()\n\nconsole.log('📜 Prepare Transactions...')\nconst tx = await Mina.transaction(\n    {\n        'feePayerKey': deployer['privateKey']['field'],\n        'fee': 100_000_000,\n        'memo': 'abc'\n    },\n    () => {\n        zkAppInstance.update( Field( 1853020188851841 ) ) \n    }\n)\n\nconsole.log('🔍 Proving Transaction...')\nawait tx.prove()\n\nconsole.log('✍️ Signing Transaction...')\nconst signedMessage = tx.sign([deployer['privateKey']['field']])\n\nconsole.log('🚚 Sending Transaction...')\nconst response = await signedMessage.send()\nconsole.log(`   Explorer URL: https://minascan.io/berkeley/tx/${response.hash()}`)\n"
                }
            ],
            "contracts": [
                {
                    "destination": "contracts/Square.ts",
                    "content": "import {\n    Field,\n    SmartContract,\n    state,\n    State,\n    method,\n  } from 'o1js';\n\n\nexport class Square extends SmartContract {\n    @state(Field) num = State<Field>();\n\n\n    init() {\n      super.init();\n      this.num.set(Field(3));\n    }\n\n\n    @method update(square: Field) {\n      const currentState = this.num.get();\n      this.num.assertEquals(currentState);\n      square.assertEquals(currentState.mul(currentState));\n      this.num.set(square);\n    }\n}"
                },
                {
                    "destination": "contracts/build/Square.js",
                    "content": "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Field, SmartContract, state, State, method, } from 'o1js';\nexport class Square extends SmartContract {\n    constructor() {\n        super(...arguments);\n        this.num = State();\n    }\n    init() {\n        super.init();\n        this.num.set(Field(3));\n    }\n    update(square) {\n        const currentState = this.num.get();\n        this.num.assertEquals(currentState);\n        square.assertEquals(currentState.mul(currentState));\n        this.num.set(square);\n    }\n}\n__decorate([\n    state(Field),\n    __metadata(\"design:type\", Object)\n], Square.prototype, \"num\", void 0);\n__decorate([\n    method,\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Field]),\n    __metadata(\"design:returntype\", void 0)\n], Square.prototype, \"update\", null);\n"
                }
            ],
            "frontend": [
                {
                    "destination": "frontend/send.html",
                    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        .process-container {\n            font-family: Arial, sans-serif; /* Specify a non-serif font */\n            display: flex;\n            flex-direction: column;\n            align-items: flex-start; /* Align steps to the left */\n        }\n        .step {\n            display: flex;\n            align-items: center;\n            width: 400px;\n            padding: 10px;\n            color: #777; /* Use a different shade of gray (#777) */\n        }\n        .active-step {\n            color: black; /* Text color for active steps */\n        }\n        .done-step {\n            color: #777; /* Use the same gray (#777) for done steps */\n        }\n        .error-step {\n            color: red; /* Text color for error steps */\n        }\n        .step-circle {\n            width: 20px;\n            height: 20px;\n            background-color: #ccc; /* Default circle color */\n            border-radius: 50%; /* Make it circular */\n            margin-right: 10px; /* Space between circle and step text */\n            display: flex;\n            justify-content: center; /* Center the content (status) in the circle */\n            align-items: center;\n        }\n        .done-step .step-circle {\n            background-color: #4CAF50; /* Green color for done steps */\n        }\n        .step-content {\n            flex-grow: 1; /* Expand to fill available space */\n            padding-right: 10px; /* Add right padding between content and button */\n        }\n        .step-title {\n            font-weight: bold;\n        }\n        .step-description {\n            font-style: italic;\n        }\n        .step-message {\n            font-style: italic;\n        }\n        .step-dropdown {\n            width: 100%;\n            padding: 5px;\n            margin-bottom: 10px;\n        }\n        .step-button {\n            padding: 5px 10px;\n            background-color: #ccc; /* Default button color for inactive steps */\n            color: white; /* Set text color to white for inactive buttons */\n            border: none;\n            cursor: not-allowed; /* Change cursor for inactive buttons */\n        }\n        .active-step .step-button {\n            background-color: #007BFF; /* Active step button color */\n            cursor: pointer; /* Change cursor for active buttons */\n        }\n    </style>\n    <script src=\"./src/UI.js\"></script>\n    <script src=\"./src/Step.js\"></script>\n</head>\n<body>\n    <div class=\"process-container\">\n        <div id=\"auro\" class=\"step done-step\">\n            <div class=\"step-circle done-step\"></div>\n            <div class=\"step-content\">\n                <div class=\"step-title\">Connect Auro Wallet</div>\n                <div class=\"step-description\">Choose Network</div>\n                <select class=\"step-dropdown\" onchange=\"handleDropdownChange(this)\" disabled></select>\n                <div class=\"step-message\"></div>\n                <div class=\"step-message\"></div>\n            </div>\n            <button class=\"step-button\"  onclick=\"handleButtonClick('auro')\" disabled>Connect</button>\n        </div>\n        <div id=\"o1js\" class=\"step active-step\">\n            <div class=\"step-circle\"></div>\n            <div class=\"step-content\">\n                <div class=\"step-title\">Import o1js</div>\n                <div class=\"step-description\">Choose location</div>\n                <select class=\"step-dropdown\" onchange=\"handleDropdownChange(this)\"></select>\n                <div class=\"step-message\"></div>\n                <div class=\"step-message\"></div>\n            </div>\n            <button class=\"step-button\" onclick=\"handleButtonClick('o1js')\">Import</button>\n        </div>\n        <div id=\"smartContract\" class=\"step\">\n            <div class=\"step-circle\"></div>\n            <div class=\"step-content\">\n                <div class=\"step-title\">Import Smart Contract</div>\n                <div class=\"step-description\">Choose Project</div>\n                <select class=\"step-dropdown\" onchange=\"handleDropdownChange(this)\" disabled></select>\n                <div class=\"step-message\"></div>\n                <div class=\"step-message\"></div>\n            </div>\n            <button class=\"step-button\" onclick=\"handleButtonClick('smartContract')\" disabled>Import</button>\n        </div>\n    </div>\n\n    <script>\n        function handleButtonClick( key ) {\n            if( typeof step !== 'undefined' ) {\n                step.buttonPressed( { key } )\n                    .then( a => a )\n                    .catch( e => console.log( e ) )\n            }\n        }\n\n        // all 3 variables are global and available in the console.\n        var easymina\n        var o1js\n        var smartContract\n\n        var step = new Step()\n        async function main() {\n            await step.init()\n        }\n\n        main()\n            .then( a => console.log( a ) )\n            .catch( e => console.log( e ) )\n    </script>\n</body>\n</html>\n"
                },
                {
                    "destination": "frontend/src/Step.js",
                    "content": "const ui = new UI()\n\n\nconst Step = class Step extends EventTarget {\n    #config\n    #state\n\n\n    constructor() {\n        super()\n        this.#config = {\n            'auro': {\n                'validNetworks': [ 'devnet', 'berkeley', 'testworld2', 'mainnet' ],\n                'options': [\n                    { 'text': 'Berkeley', 'value': 'berkeley' },\n/*\n                    { 'text': 'Testworld 2', 'value': 'testworld2' },\n                    { 'text': 'Mainnet', 'value': 'mainnet' },\n                    { 'text': 'Dev Net', 'value': 'devnet' }\n*/\n                ]\n            },\n            'o1js': {\n                'options': [\n                    { 'text': 'Local', 'value': '/api/getLocalO1js' },\n                    { 'text': 'CDN', 'value': 'https://cdn.jsdelivr.net/npm/o1js' }\n                ]\n            },\n            'smartContract': {\n                'options': []\n            }\n        }\n    }\n\n\n    async init() {\n        this.#state = {\n            'auro': {\n                'exists': false,\n                'account': null,\n                'network': null\n            },\n            'o1js': {\n                'url': null\n            },\n            'smartContract': {\n                'url': null\n            }\n        }\n\n        const response = await fetch('/api/getContracts')\n        const data = await response.json()\n\n        this.#config['smartContract']['options'] = data['data']\n            .map( contractName => { \n                const struct = { \n                    'text': contractName, \n                    'value': `/api/getContractSourceCode/${contractName}.js` \n                } \n                return struct\n            } )\n\n        this.#addSelectOptions()\n        ui.changeStatusRows( { 'state': 'waiting' } )\n        ui.changeStatusRow( { 'state': 'active', 'key': 'auro' } )\n\n\n\n        return true\n    }\n\n\n    async buttonPressed( { key } ) {\n        switch( key ) {\n            case 'auro':\n                await this.#setAuro()\n                break\n            case 'o1js':\n                await this.#setImport()\n                break\n            case 'smartContract': \n                await this.#setSmartContract()\n                break\n            case 'compile':\n                // await this.#compileSmartContract()\n                break\n            default:\n                console.log( `Button with the key '${key}' not known.` )\n                break\n        }\n\n        this.#updateGlobalVariable()\n        return true\n    }\n\n\n    #compileSmartContract() {\n        const { Square } = smartContract\n    }\n\n\n    #addSelectOptions() {\n        ui.setSelectOptions( { \n            'key': 'auro', \n            'options': this.#config['auro']['options'] \n        } )\n\n        ui.setSelectOptions( { \n            'key': 'o1js', \n            'options': this.#config['o1js']['options']\n        } )\n\n        ui.setSelectOptions( { \n            'key': 'smartContract', \n            'options': this.#config['smartContract']['options']\n        } )\n    }\n\n\n    async #setAuro() {\n        const validation = await this.#validateSetAuro()\n        const [ messages, comments, accounts, network ] = validation\n        this.#printMessages( { messages, comments } )\n        this.#state['auro']['exists'] = messages.length === 0 ? true : false\n        if( !this.#state['auro']['exists'] ) { \n            const rows = [ messages.join(', ' ), '' ]\n            ui.setResponseText( { 'key': 'auro', rows } )\n            return true \n        }\n\n        this.#state['auro']['account'] = accounts[ 0 ]\n\n        const targetChain = ui.getSelectOption( { 'key': 'auro' } )\n        if( network['chainId'] !== targetChain ) {\n            await mina.switchChain( { 'chainId': targetChain } )\n            const newNetwork = await mina.requestNetwork()\n            this.#state['auro']['network'] = newNetwork['chainId']\n        } else {\n            this.#state['auro']['network'] = network['chainId']\n        }\n\n        const message = `Account: ${this.#state['auro']['account']}, Network: ${this.#state['auro']['network']}.`\n        const address = `${this.#state['auro']['account'].substring(0, 8)}...${this.#state['auro']['account'].substring( 51, 55 )}`\n        ui.setResponseText( {\n            'key': 'auro',\n            'rows': [ `Account: ${address}`, `Network: ${this.#state['auro']['network']}`]\n        } )\n        ui.nextStep()\n\n        return true\n    }\n\n\n    async #validateSetAuro() {\n        const messages = []\n        const comments = []\n        let accounts\n        let network\n\n        if( typeof mina === 'undefined' ) {\n            messages.push( `Auro Wallet is not available.` )\n        }\n\n       if( messages.length === 0 ) {\n            try {\n                accounts = await mina.requestAccounts()\n            } catch( e ) {\n                messages.push( `Auro .requestAccounts() failed. ${e}` )\n            }\n\n            try {\n                network = await mina.requestNetwork()\n            } catch( e ) {\n                messages.push( `Auro .requestNetwork() failed. ${e}` )\n            }\n\n            if( !Array.isArray( accounts ) ) {\n                messages.push( `Account is not array.` )\n            } else if( accounts.length === 0 ) {\n                messages.push( `Not account connected.` ) \n            } else {\n                comments.push( `${accounts.length} Account${accounts.length === 0 ? '' : 's' } connected (${accounts.join( ', ' )}).`)\n            }\n\n\n            if( typeof network !== 'object' ) {\n                messages.push( `Network is not object.` )\n            } else if( !network.hasOwnProperty( 'chainId' ) ) {\n                messages.push( `Network has not the key 'chainId'.` ) \n            } else if( !this.#config['auro']['validNetworks'].includes( network['chainId'] ) ) {\n                messages.push( `Network with the value '${network}' is not valid.` )\n            } else {\n                comments.push( `Network is set to ${network['chainId']}.` )\n            }\n       }\n\n        return [ messages, comments, accounts, network ]\n    }\n\n\n    async #setImport() {\n        const url = ui.getSelectOption( { 'key': 'o1js' } )\n        o1js = await import( url )\n\n        this.#state['o1js']['url'] = url\n\n        ui.setResponseText( {\n            'key': 'o1js',\n            'rows': [ `Succesful loaded.` ]\n        } )\n        ui.nextStep()\n\n        return true\n    }\n\n\n    async #setSmartContract() {\n        const url = ui.getSelectOption( { 'key': 'smartContract' } )\n        smartContract = await import( url )\n\n        ui.setResponseText( {\n            'key': 'smartContract',\n            'rows': [ `Succesful loaded.` ]\n        } )\n\n        // ui.nextStep()\n\n        return true\n    }\n\n\n    #updateGlobalVariable() {\n        easymina = Object\n            .entries( this.#state )\n            .reduce( ( acc, a, index ) => {\n                const [ key, value ] = a\n                !Object.hasOwn( acc, key ) ? acc[ key ] = {} : ''\n                Object\n                    .entries( value )\n                    .forEach( b => {\n                        const [ k, v ] = b\n                        acc[ key ][ k ] = v\n                    } )\n                return acc\n            }, {} )\n\n        return true\n    }\n\n\n    #printMessages( { messages=[], comments=[] } ) {\n        const n = [\n            [ comments, 'Comment', false ],\n            [ messages, 'Error', true ]\n        ]\n            .forEach( ( a, index ) => {\n                const [ msgs, headline, stop ] = a\n                msgs\n                    .forEach( ( msg, rindex, all ) => {\n                        rindex === 0 ? console.log( `\\n${headline}${all.length > 1 ? 's' : ''}:` ) : ''\n                        console.log( `  - ${msg}` )\n                        if( ( all.length - 1 ) === rindex ) {\n                            if( stop === true ) {\n\n                            }\n                        }\n                    } )\n            } )\n    \n        return true\n    }\n}"
                },
                {
                    "destination": "frontend/src/UI.js",
                    "content": "const UI = class UI extends EventTarget {\n    #config\n    #state\n\n\n    constructor() {\n        super()\n        this.#config = {\n            'states': {\n                'done': {\n                    'className': 'step done-step',\n                    'circleClassName': 'step-circle done-step',\n                    'selectDisable': true,\n                    'buttonDisable': true\n                },\n                'active': {\n                    'className': 'step active-step',\n                    'circleClassName': 'step-circle done-step',\n                    'selectDisable': false,\n                    'buttonDisable': false\n                },\n                'waiting': {\n                    'className': 'step',\n                    'circleClassName': 'step-circle',\n                    'selectDisable': true,\n                    'buttonDisable': true\n                }\n            },\n            'dom': {\n                'auro': {\n                    'select': true\n                },\n                'o1js': {\n                    'select': true\n                },\n                'smartContract': {\n                    'select': true\n                }\n            }\n        }\n\n        this.#state = {\n            'activeKey': null\n        }\n    }\n\n\n    changeStatusRows( { state } ) {\n        console.log( 'disable')\n        Object\n            .keys( this.#config['dom'] )\n            .forEach( key => this.changeStatusRow( { key, state } ) )\n\n        return true\n    }\n\n\n    changeStatusRow( { key, state } ) {\n        if( state === 'active' ) {\n            this.#state['activeKey'] = key\n        }\n        const element = document.getElementById( key )\n        element.className = this.#config['states'][ state ]['className']\n\n        if( this.#config['dom'][ key ]['select'] ) {\n            const select = document\n                .querySelector( `#${key} select.step-dropdown` )\n            select.disabled = this.#config['states'][ state ]['selectDisable']\n        }\n\n        const button = document\n            .querySelector( `#${key} button.step-button` )\n        button.disabled = this.#config['states'][ state ]['buttonDisable']\n\n        const circle = element.firstElementChild;\n        circle.className = this.#config['states'][ state ]['circleClassName']\n\n        return true\n    }\n\n\n    setSelectOptions( { key, options } ) {\n        const select = document\n            .querySelector( `#${key} select.step-dropdown` )\n\n        options\n            .forEach( option => {\n                const el = document.createElement( 'option' )\n                el.text = option['text']\n                el.value = option['value']\n                select.appendChild( el )\n            } )\n\n        return true\n    } \n\n\n    setResponseText( { key, rows } ) {\n        const divs = document\n            .querySelectorAll( `#${key} div.step-message` )\n\n        rows\n            .forEach( ( row, index ) => {\n                divs[ index ].textContent = row\n            } )\n\n        return true\n    }\n    \n    \n    getSelectOption( { key } ) {\n        const select = document\n            .querySelector( `#${key} select.step-dropdown` )\n        return select.options[ select.selectedIndex ].value\n    }\n\n\n    nextStep() {\n        const keys = Object\n            .keys( this.#config['dom'] )\n        const index = keys\n            .findIndex( a => a === this.#state['activeKey'] )\n\n        if( keys.length === index ) {\n            this.changeStatusRow( { \n                'key': keys[ index ], \n                'state': 'done'\n            } )\n        } else {\n            this.changeStatusRow( { \n                'key': keys[ index ], \n                'state': 'done'\n            } )\n\n            this.changeStatusRow( { \n                'key': keys[ index + 1 ], \n                'state': 'active'\n            } )\n        }\n\n        return true\n    }\n}"
                }
            ]
        }
    }
}